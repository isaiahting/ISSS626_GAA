{
  "hash": "d300e1b806bcedae0d8ec258e250d8e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3\"\nauthor: \"Joshua TING\"\ndate: \"21 October, 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute:\n  eval: true #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n\n# Take-home Exercise 3b: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods\n\n## Overview\n\n### Purpose\n\nIn this take-home exercise, We will calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023.\n\n## Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, readr, sf, httr, jsonlite, rvest, dplyr, units, lubridate, tmap, ggplot2,ggpubr, beepr, corrplot, spdep, GWmodel, SpatialML, rsample, Metrics)\n```\n:::\n\n\n| **Package** | **Function** | **Explanation** |\n|----------------------|-----------------------|----------------------------|\n| **tidyverse** | `dplyr::select`, `dplyr::mutate`, `ggplot2::ggplot`, `tibble::tibble` | A collection of R packages for data manipulation (`dplyr`), data visualization (`ggplot2`), and reading (`readr`). `tibble` is for working with data frames. |\n| **readr** | `readr::read_csv`, `readr::write_csv` | Functions for reading and writing CSV files efficiently. |\n| **sf** | `sf::st_as_sf`, `sf::st_transform`, `sf::st_drop_geometry`, `sf::st_is_empty`, `sf::st_coordinates` | Functions for handling spatial data, including converting data to `sf` objects, transforming coordinates, and checking for empty geometries. |\n| **httr** | `httr::GET`, `httr::POST` | Functions for making HTTP requests, such as GET and POST, to interact with web APIs. |\n| **jsonlite** | `jsonlite::fromJSON`, `jsonlite::toJSON` | Functions to parse JSON data into R objects and to convert R objects into JSON format. |\n| **rvest** | `rvest::read_html`, `rvest::html_nodes`, `rvest::html_table` | Used for web scraping, including reading HTML content and extracting elements from web pages. |\n| **dplyr** | `dplyr::select`, `dplyr::mutate`, `dplyr::filter`, `dplyr::summarize` | A core package for data manipulation, used for selecting columns, creating new columns, filtering data, and summarizing results. |\n| **units** | `units::set_units`, `units::as_units` | Provides functions for handling and converting physical units in R. |\n| **lubridate** | `lubridate::ymd`, `lubridate::mdy`, `lubridate::today` | Functions to parse, manipulate, and work with date-time objects in a variety of formats. |\n| **tmap** | `tmap::tm_shape`, `tmap::tm_borders`, `tmap::tm_fill` | A package for thematic mapping. Functions allow for creating maps with geographic boundaries, fill colors, and more. |\n| **ggplot2** | `ggplot2::ggplot`, `ggplot2::geom_point`, `ggplot2::geom_line` | The main visualization package in R, used for creating static graphics such as scatter plots, line charts, histograms, and more. |\n| **ggpubr** | `ggpubr::ggarrange`, `ggpubr::stat_cor` | Enhances `ggplot2` by allowing for arranging multiple plots and adding statistical tests, like correlation coefficients, to plots. |\n| **beepr** | `beepr::beep` | A simple function to play sounds as notifications, commonly used to alert the user when an operation is complete. |\n| **corrplot** | `corrplot::corrplot` | Used to visualize correlation matrices, offering various plotting styles and methods for better presentation of correlations. |\n| **spdep** | `spdep::nb2listw`, `spdep::spautolm` | Provides spatial econometrics tools, such as calculating spatial weights and performing spatial autoregressive models. |\n| **GWmodel** | `GWmodel::gwr.basic`, `GWmodel::grf`, `GWmodel::bw.gwr` | Functions for geographically weighted regression (GWR), including model fitting (`gwr.basic`), bandwidth selection, and fitting spatial regression trees. |\n| **SpatialML** | `SpatialML::SpatialCV`, `SpatialML::SpatialML` | Used for machine learning models in spatial contexts, including spatial cross-validation and spatially explicit machine learning techniques. |\n| **rsample** | `rsample::initial_split`, `rsample::training`, `rsample::testing` | Provides tools for resampling and splitting data into training and testing sets for model validation. |\n| **Metrics** | `Metrics::rmse`, `Metrics::mae`, `Metrics::mse` | Functions to calculate various performance metrics for model evaluation, including Root Mean Square Error (RMSE), Mean Absolute Error (MAE), and Mean Squared Error (MSE). |\n\n## The Data\n\n1.  Aspatial Dataset:\n\n-   HDB Resale Flat Prices from [Data.gov.s](https://data.gov.sg./datasets?query=HDB+resale+flat+prices&page=1&resultId=189)g\n\n2.  Geospatial Dataset:\n\n-   MPSZ: Boundaries of Singapore from [ura.gov.sg](https://www.ura.gov.sg/Corporate/Planning/Master-Plan)\n\n-   Bus Stops: A list of bus stops locally from [datamall.lta.gov.sg](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=bus%20stop)\n\n-   Eldercare (SHP): A list of elder care centres locally from [data.gov.sg](https://data.gov.sg./datasets?query=eldercare&page=1&resultId=d_3545b068e3f3506c56b2cb6b6117b884)\n\n-   Hawker Centres (KML): a list of hawker centres from [data.gov.sg](https://data.gov.sg./datasets?query=hawker+centre&page=1&resultId=d_ccca3606c337a5c386b9c88dc0dd08b6)\n\n-   Kindergarten (KML) from [data.gov.sg](https://data.gov.sg/datasets?query=kindergarten&page=1&resultId=d_95aa63998d7de94dd4cb3e8e43a5f6d5)\n\n-   Malls (CSV) from [kaggle.com](https://www.kaggle.com/datasets/karthikgangula/shopping-mall-coordinates)\n\n-   Train Station (SHP) from [datamall.lta.gov.sg](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=train%20station)\n\n-   SDCP Park (kml) from [data.gov.sg](https://data.gov.sg/datasets?query=park&page=1&resultId=d_dec52717093b20d30677a938d39f0dac)\n\n-   Schools (CSV) from [data.gov.sg](https://data.gov.sg/datasets?query=general+information+of+schools&page=1&resultId=d_688b934f82c1059ed0a6993d2a829089)\n\n-   Supermarket (KML) from [data.gov.sg](https://data.gov.sg/datasets?query=supermarketsKML&page=1&resultId=d_8a77ee0446716b2ce475a587004afc73)\n\n## Importing Data\n\n1.  Aspatial Data:\n\n-   HDB Resale\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale2023 <- read_csv(\"data/rawdata/aspatial/hdb/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n2.  Geospatial Data:\n\n-   MPSZ in shapefile format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/rawdata/geospatial/mpsz\",\n               layer = \"MP14_SUBZONE_NO_SEA_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/mpsz' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n-   Bus Stops in shapefile format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/rawdata/geospatial/busstop\",\n                      layer = \"BusStop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/busstop' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n-   **Eldercare** in shapefile format\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/rawdata/geospatial/eldercare\",\n                      layer = \"ELDERCARE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/eldercare' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n-   Hawker Centres in kml format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker <- st_read(\"data/rawdata/geospatial/hawker/HawkerCentres.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HAWKERCENTRE' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/hawker/HawkerCentres.kml' \n  using driver `KML'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   Kindergarten in fml format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergarten <- st_read(\"data/rawdata/geospatial/kindergarten/Kindergartens.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `KINDERGARTENS' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/kindergarten/Kindergartens.kml' \n  using driver `KML'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nkindergarten <- st_transform(kindergarten, 3414)\n```\n:::\n\n\n-   Shopping Malls in csv format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmall <- read_csv(\"data/rawdata/geospatial/mall/shopping_mall_coordinates.csv\")\n```\n:::\n\n\n-   Train Station in shapefile format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt <- st_read(dsn = \"data/rawdata/geospatial/mrt\",\n                layer = \"RapidTransitSystemStation\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `RapidTransitSystemStation' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/mrt' \n  using driver `ESRI Shapefile'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 230 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n-   SDCP Park in kml format\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark <- st_read(\"data/rawdata/geospatial/park/NParksParksandNatureReservesKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `NPARKS_PARKS' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/park/NParksParksandNatureReservesKML.kml' \n  using driver `KML'\nSimple feature collection with 430 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6925 ymin: 1.2115 xmax: 104.0544 ymax: 1.46419\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n-   Schools in csv format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschool <- read_csv(\"data/rawdata/geospatial/school/Generalinformationofschools.csv\") %>% \n  mutate(postal_code = as.character(postal_code))\n```\n:::\n\n\n-   Supermarket in kml format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- st_read(\"data/rawdata/geospatial/supermarket/SupermarketsKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SUPERMARKETS' from data source \n  `/Users/joshuatingsiyuan14/Desktop/isaiahting/ISSS626_GAA/TakeHomeExercise/TakeHome3/data/rawdata/geospatial/supermarket/SupermarketsKML.kml' \n  using driver `KML'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: callout-important\n## Standardising CRS\n\nIronically, all of these data sets are from Singapore, yet, it presents with varied CRS.\n\nTherefore, in this exercise, SVY21 (EPSG 3414) will be the standardised CRS as all data relates to local context.\n:::\n\n## Data Wrangling\n\n### HDB Resale\n\nIn tidying up the HDB resale data, the column *block* & *street_name* are combined and *remaining_lease* are split in two columns for ease of manipulation. Additionally, we are changing the column *remaining_lease_yr* as an integer and splitting it to month and year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale2023 %>%\n  mutate(address = paste(block,street_name)) %>% #combined block & street name\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>% #extract remaining lease by yr\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11))) #extract remaining lease by month\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address)) #parse a list as API cannot read df\n#unique reduces records to pass to portal\n#sort is used to easier to find geo codes\n```\n:::\n\n\nFetching Data from onemap API\n\nAs the HDB resale data lack of coordinates, API was used to extract the coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n\n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address = i, \n                           postal = postal, \n                           latitude_wgs84 = lat,  # renamed to clarify coordinate system\n                           longitude_wgs84 = lng) # renamed to clarify coordinate system\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address = i, \n                               postal = NA, \n                               latitude_wgs84 = NA, \n                               longitude_wgs84 = NA)\n      }\n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address = i, \n                             postal = postal, \n                             latitude_wgs84 = lat, \n                             longitude_wgs84 = lng)\n      }\n    }\n    else {\n      new_row <- data.frame(address = i, \n                           postal = NA, \n                           latitude_wgs84 = NA, \n                           longitude_wgs84 = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  \n  # Convert to sf object with WGS84 coordinates (EPSG:4326)\n  # Filter out rows with NA coordinates first\n  valid_coords <- postal_coords[!is.na(postal_coords$latitude_wgs84) & \n                              !is.na(postal_coords$longitude_wgs84), ]\n  \n  if(nrow(valid_coords) > 0) {\n    coords_sf <- st_as_sf(valid_coords, \n                         coords = c(\"longitude_wgs84\", \"latitude_wgs84\"),\n                         crs = 4326)\n    \n    # Transform to SVY21 (EPSG:3414)\n    coords_svy21 <- st_transform(coords_sf, 3414)\n    \n    # Extract coordinates\n    coords_matrix <- st_coordinates(coords_svy21)\n    \n    # Add SVY21 coordinates back to the original dataframe with desired column names\n    valid_coords$longitude <- coords_matrix[, 1]  # SVY21 X coordinate as longitude\n    valid_coords$latitude <- coords_matrix[, 2]   # SVY21 Y coordinate as latitude\n    \n    # Merge back with rows that had NA coordinates\n    result <- merge(postal_coords, valid_coords[c(\"address\", \"longitude\", \"latitude\")], \n                   by = \"address\", all.x = TRUE)\n  } else {\n    # If no valid coordinates, add empty SVY21 columns\n    result <- postal_coords\n    result$longitude <- NA  # SVY21 coordinates\n    result$latitude <- NA   # SVY21 coordinates\n  }\n  \n  return(result)\n}\n```\n:::\n\n\nBelow is the code chunk that populates the coordinates in longitude, latitude and postal code against the address in the *add_list*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe longtitude and latitude is then combined into geometry and the crs has been set to EPSG = 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_sf <- coords %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 3414, remove = FALSE) %>%\n  select(address, postal, longitude, latitude, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nFollowing which, the *coords_sf* is then combined to the *resale_selected* df by address, forming a new df *resale_geom*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geom <- resale_selected %>% \n  left_join(coords_sf, by = \"address\")\n```\n:::\n\n\nAssigning CRS EPSG 3414 to resale_geom\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geom <- resale_geom %>% \n  st_as_sf(coords =c(\"longitude\", \"latitude\"), crs = 3414, remove = FALSE)\n```\n:::\n\n\nUsing st_crs() to check if it is the correct CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(resale_geom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\nIn ensuring these are the variables we need, we use select() to include the variables. Then, we compute the unit age with the formula of 99 year (convention HDB lease years) - remaining lease year. Lastly, we change the column *month* to POSICxt so we can manipulate in ease later on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geom <- resale_geom %>%\n  select(address, town, resale_price, month, flat_type, floor_area_sqm, remaining_lease_yr,longitude, latitude, geometry) %>% \n  mutate(unit_age = 99 - remaining_lease_yr)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Overview of Data sets in Coordinate Reference System\n\n|    WGS 84    |   SVY21   | No PCS / CSV |\n|:------------:|:---------:|:------------:|\n|    Hawker    | Bus Stop  |  HDB Resale  |\n| Kindergarten | Eldercare |     Mall     |\n|     Park     |    MRT    |    School    |\n| Supermarket  |           |              |\n|              |           |              |\n\n::: callout-note\n**Coordinate System**\n\nViewing the sf, we noticed that the coordinates are in WGS84 - EPSG 4326. This may not be suitable for our data manipulation later on as we are standardising it to our local coordinates system which is SVY 21 EPSG 3414.\n:::\n\n::: callout-tip\n**Overview of Coordinate System**\n\nWGS84 (EPSG: 4326) - Global Use\n\n1.  **Definition**: WGS84 (World Geodetic System 1984) is a global coordinate system that defines latitude and longitude on a three-dimensional ellipsoid. It is the standard used by the Global Positioning System (GPS).\n\n2.  **Coordinate System**: It uses a geographic coordinate system based on a spheroid, where coordinates are given in degrees (latitude and longitude).\n\n3.  **Application**: WGS84 is used globally for mapping, navigation, and geolocation applications. It provides a standard reference for geographic information systems (GIS) and is essential for interoperability between different systems.\n\n4.  **Units**: The coordinates are expressed in degrees.\n\nSVY21 (EPSG: 3413) - Singapore Use\n\n1.  **Definition**: SVY21 (Singapore Vertical 21) is a national coordinate system specifically designed for Singapore. It is based on the Transverse Mercator projection and is tailored to provide accurate measurements within Singapore's geographic boundaries.\n\n2.  **Coordinate System**: SVY21 uses a projected coordinate system, where coordinates are given in meters. The system is more suitable for local applications because it minimizes distortions in a specific area.\n\n3.  **Application**: SVY21 is primarily used for urban planning, construction, and various governmental applications within Singapore. It provides higher accuracy for local measurements compared to global systems like WGS84.\n\n4.  **Units**: The coordinates are expressed in meters.\n:::\n\n### MPSZ\n\nFirst, we would like to check if there is any shared boudaries in this sf as this will churned as invalid polygons in the data. We will then noticed that there are several \"Ring Self-Intersection\" specifically, there are 9 polygons with self-intersection issues which is not good for the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_is_valid(mpsz, reason = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"Valid Geometry\"                                           \n  [2] \"Valid Geometry\"                                           \n  [3] \"Valid Geometry\"                                           \n  [4] \"Valid Geometry\"                                           \n  [5] \"Valid Geometry\"                                           \n  [6] \"Valid Geometry\"                                           \n  [7] \"Valid Geometry\"                                           \n  [8] \"Valid Geometry\"                                           \n  [9] \"Valid Geometry\"                                           \n [10] \"Valid Geometry\"                                           \n [11] \"Valid Geometry\"                                           \n [12] \"Valid Geometry\"                                           \n [13] \"Valid Geometry\"                                           \n [14] \"Valid Geometry\"                                           \n [15] \"Valid Geometry\"                                           \n [16] \"Valid Geometry\"                                           \n [17] \"Valid Geometry\"                                           \n [18] \"Valid Geometry\"                                           \n [19] \"Valid Geometry\"                                           \n [20] \"Valid Geometry\"                                           \n [21] \"Valid Geometry\"                                           \n [22] \"Valid Geometry\"                                           \n [23] \"Valid Geometry\"                                           \n [24] \"Valid Geometry\"                                           \n [25] \"Valid Geometry\"                                           \n [26] \"Valid Geometry\"                                           \n [27] \"Valid Geometry\"                                           \n [28] \"Valid Geometry\"                                           \n [29] \"Valid Geometry\"                                           \n [30] \"Valid Geometry\"                                           \n [31] \"Valid Geometry\"                                           \n [32] \"Valid Geometry\"                                           \n [33] \"Valid Geometry\"                                           \n [34] \"Valid Geometry\"                                           \n [35] \"Valid Geometry\"                                           \n [36] \"Valid Geometry\"                                           \n [37] \"Valid Geometry\"                                           \n [38] \"Ring Self-intersection[27932.3925999999 21982.7971999999]\"\n [39] \"Ring Self-intersection[26885.4439000003 26668.3121000007]\"\n [40] \"Valid Geometry\"                                           \n [41] \"Valid Geometry\"                                           \n [42] \"Valid Geometry\"                                           \n [43] \"Ring Self-intersection[26920.1689999998 26978.5440999996]\"\n [44] \"Valid Geometry\"                                           \n [45] \"Valid Geometry\"                                           \n [46] \"Valid Geometry\"                                           \n [47] \"Valid Geometry\"                                           \n [48] \"Valid Geometry\"                                           \n [49] \"Valid Geometry\"                                           \n [50] \"Valid Geometry\"                                           \n [51] \"Valid Geometry\"                                           \n [52] \"Valid Geometry\"                                           \n [53] \"Valid Geometry\"                                           \n [54] \"Valid Geometry\"                                           \n [55] \"Valid Geometry\"                                           \n [56] \"Valid Geometry\"                                           \n [57] \"Valid Geometry\"                                           \n [58] \"Valid Geometry\"                                           \n [59] \"Valid Geometry\"                                           \n [60] \"Valid Geometry\"                                           \n [61] \"Valid Geometry\"                                           \n [62] \"Valid Geometry\"                                           \n [63] \"Valid Geometry\"                                           \n [64] \"Valid Geometry\"                                           \n [65] \"Valid Geometry\"                                           \n [66] \"Valid Geometry\"                                           \n [67] \"Valid Geometry\"                                           \n [68] \"Valid Geometry\"                                           \n [69] \"Valid Geometry\"                                           \n [70] \"Valid Geometry\"                                           \n [71] \"Valid Geometry\"                                           \n [72] \"Valid Geometry\"                                           \n [73] \"Valid Geometry\"                                           \n [74] \"Valid Geometry\"                                           \n [75] \"Valid Geometry\"                                           \n [76] \"Valid Geometry\"                                           \n [77] \"Valid Geometry\"                                           \n [78] \"Valid Geometry\"                                           \n [79] \"Valid Geometry\"                                           \n [80] \"Valid Geometry\"                                           \n [81] \"Valid Geometry\"                                           \n [82] \"Valid Geometry\"                                           \n [83] \"Valid Geometry\"                                           \n [84] \"Valid Geometry\"                                           \n [85] \"Valid Geometry\"                                           \n [86] \"Valid Geometry\"                                           \n [87] \"Valid Geometry\"                                           \n [88] \"Valid Geometry\"                                           \n [89] \"Valid Geometry\"                                           \n [90] \"Valid Geometry\"                                           \n [91] \"Valid Geometry\"                                           \n [92] \"Valid Geometry\"                                           \n [93] \"Valid Geometry\"                                           \n [94] \"Valid Geometry\"                                           \n [95] \"Valid Geometry\"                                           \n [96] \"Valid Geometry\"                                           \n [97] \"Ring Self-intersection[14484.6859999998 31330.1319999993]\"\n [98] \"Ring Self-intersection[12861.3828999996 32207.4923]\"      \n [99] \"Valid Geometry\"                                           \n[100] \"Valid Geometry\"                                           \n[101] \"Valid Geometry\"                                           \n[102] \"Valid Geometry\"                                           \n[103] \"Ring Self-intersection[19681.2353999997 31294.4521999992]\"\n[104] \"Valid Geometry\"                                           \n[105] \"Valid Geometry\"                                           \n[106] \"Valid Geometry\"                                           \n[107] \"Valid Geometry\"                                           \n[108] \"Valid Geometry\"                                           \n[109] \"Valid Geometry\"                                           \n[110] \"Valid Geometry\"                                           \n[111] \"Valid Geometry\"                                           \n[112] \"Valid Geometry\"                                           \n[113] \"Valid Geometry\"                                           \n[114] \"Valid Geometry\"                                           \n[115] \"Valid Geometry\"                                           \n[116] \"Valid Geometry\"                                           \n[117] \"Valid Geometry\"                                           \n[118] \"Valid Geometry\"                                           \n[119] \"Valid Geometry\"                                           \n[120] \"Valid Geometry\"                                           \n[121] \"Valid Geometry\"                                           \n[122] \"Valid Geometry\"                                           \n[123] \"Valid Geometry\"                                           \n[124] \"Valid Geometry\"                                           \n[125] \"Valid Geometry\"                                           \n[126] \"Valid Geometry\"                                           \n[127] \"Valid Geometry\"                                           \n[128] \"Valid Geometry\"                                           \n[129] \"Valid Geometry\"                                           \n[130] \"Valid Geometry\"                                           \n[131] \"Valid Geometry\"                                           \n[132] \"Valid Geometry\"                                           \n[133] \"Valid Geometry\"                                           \n[134] \"Valid Geometry\"                                           \n[135] \"Valid Geometry\"                                           \n[136] \"Valid Geometry\"                                           \n[137] \"Valid Geometry\"                                           \n[138] \"Valid Geometry\"                                           \n[139] \"Valid Geometry\"                                           \n[140] \"Valid Geometry\"                                           \n[141] \"Valid Geometry\"                                           \n[142] \"Valid Geometry\"                                           \n[143] \"Valid Geometry\"                                           \n[144] \"Valid Geometry\"                                           \n[145] \"Valid Geometry\"                                           \n[146] \"Valid Geometry\"                                           \n[147] \"Valid Geometry\"                                           \n[148] \"Valid Geometry\"                                           \n[149] \"Valid Geometry\"                                           \n[150] \"Valid Geometry\"                                           \n[151] \"Valid Geometry\"                                           \n[152] \"Valid Geometry\"                                           \n[153] \"Valid Geometry\"                                           \n[154] \"Valid Geometry\"                                           \n[155] \"Valid Geometry\"                                           \n[156] \"Valid Geometry\"                                           \n[157] \"Valid Geometry\"                                           \n[158] \"Valid Geometry\"                                           \n[159] \"Valid Geometry\"                                           \n[160] \"Valid Geometry\"                                           \n[161] \"Valid Geometry\"                                           \n[162] \"Valid Geometry\"                                           \n[163] \"Valid Geometry\"                                           \n[164] \"Valid Geometry\"                                           \n[165] \"Valid Geometry\"                                           \n[166] \"Valid Geometry\"                                           \n[167] \"Valid Geometry\"                                           \n[168] \"Valid Geometry\"                                           \n[169] \"Valid Geometry\"                                           \n[170] \"Valid Geometry\"                                           \n[171] \"Valid Geometry\"                                           \n[172] \"Valid Geometry\"                                           \n[173] \"Valid Geometry\"                                           \n[174] \"Valid Geometry\"                                           \n[175] \"Valid Geometry\"                                           \n[176] \"Valid Geometry\"                                           \n[177] \"Valid Geometry\"                                           \n[178] \"Valid Geometry\"                                           \n[179] \"Valid Geometry\"                                           \n[180] \"Valid Geometry\"                                           \n[181] \"Valid Geometry\"                                           \n[182] \"Valid Geometry\"                                           \n[183] \"Valid Geometry\"                                           \n[184] \"Valid Geometry\"                                           \n[185] \"Valid Geometry\"                                           \n[186] \"Valid Geometry\"                                           \n[187] \"Valid Geometry\"                                           \n[188] \"Valid Geometry\"                                           \n[189] \"Valid Geometry\"                                           \n[190] \"Valid Geometry\"                                           \n[191] \"Valid Geometry\"                                           \n[192] \"Valid Geometry\"                                           \n[193] \"Valid Geometry\"                                           \n[194] \"Valid Geometry\"                                           \n[195] \"Valid Geometry\"                                           \n[196] \"Valid Geometry\"                                           \n[197] \"Valid Geometry\"                                           \n[198] \"Valid Geometry\"                                           \n[199] \"Valid Geometry\"                                           \n[200] \"Valid Geometry\"                                           \n[201] \"Valid Geometry\"                                           \n[202] \"Valid Geometry\"                                           \n[203] \"Valid Geometry\"                                           \n[204] \"Valid Geometry\"                                           \n[205] \"Valid Geometry\"                                           \n[206] \"Valid Geometry\"                                           \n[207] \"Valid Geometry\"                                           \n[208] \"Valid Geometry\"                                           \n[209] \"Valid Geometry\"                                           \n[210] \"Valid Geometry\"                                           \n[211] \"Valid Geometry\"                                           \n[212] \"Valid Geometry\"                                           \n[213] \"Valid Geometry\"                                           \n[214] \"Valid Geometry\"                                           \n[215] \"Valid Geometry\"                                           \n[216] \"Valid Geometry\"                                           \n[217] \"Valid Geometry\"                                           \n[218] \"Valid Geometry\"                                           \n[219] \"Valid Geometry\"                                           \n[220] \"Valid Geometry\"                                           \n[221] \"Valid Geometry\"                                           \n[222] \"Valid Geometry\"                                           \n[223] \"Valid Geometry\"                                           \n[224] \"Valid Geometry\"                                           \n[225] \"Valid Geometry\"                                           \n[226] \"Valid Geometry\"                                           \n[227] \"Valid Geometry\"                                           \n[228] \"Valid Geometry\"                                           \n[229] \"Valid Geometry\"                                           \n[230] \"Valid Geometry\"                                           \n[231] \"Valid Geometry\"                                           \n[232] \"Valid Geometry\"                                           \n[233] \"Valid Geometry\"                                           \n[234] \"Valid Geometry\"                                           \n[235] \"Valid Geometry\"                                           \n[236] \"Valid Geometry\"                                           \n[237] \"Valid Geometry\"                                           \n[238] \"Valid Geometry\"                                           \n[239] \"Valid Geometry\"                                           \n[240] \"Valid Geometry\"                                           \n[241] \"Valid Geometry\"                                           \n[242] \"Valid Geometry\"                                           \n[243] \"Valid Geometry\"                                           \n[244] \"Valid Geometry\"                                           \n[245] \"Valid Geometry\"                                           \n[246] \"Valid Geometry\"                                           \n[247] \"Valid Geometry\"                                           \n[248] \"Valid Geometry\"                                           \n[249] \"Valid Geometry\"                                           \n[250] \"Valid Geometry\"                                           \n[251] \"Valid Geometry\"                                           \n[252] \"Valid Geometry\"                                           \n[253] \"Valid Geometry\"                                           \n[254] \"Valid Geometry\"                                           \n[255] \"Valid Geometry\"                                           \n[256] \"Valid Geometry\"                                           \n[257] \"Valid Geometry\"                                           \n[258] \"Valid Geometry\"                                           \n[259] \"Valid Geometry\"                                           \n[260] \"Valid Geometry\"                                           \n[261] \"Valid Geometry\"                                           \n[262] \"Valid Geometry\"                                           \n[263] \"Valid Geometry\"                                           \n[264] \"Valid Geometry\"                                           \n[265] \"Valid Geometry\"                                           \n[266] \"Valid Geometry\"                                           \n[267] \"Valid Geometry\"                                           \n[268] \"Valid Geometry\"                                           \n[269] \"Valid Geometry\"                                           \n[270] \"Valid Geometry\"                                           \n[271] \"Valid Geometry\"                                           \n[272] \"Valid Geometry\"                                           \n[273] \"Valid Geometry\"                                           \n[274] \"Valid Geometry\"                                           \n[275] \"Valid Geometry\"                                           \n[276] \"Ring Self-intersection[38542.2260999996 44605.4089000002]\"\n[277] \"Valid Geometry\"                                           \n[278] \"Valid Geometry\"                                           \n[279] \"Valid Geometry\"                                           \n[280] \"Valid Geometry\"                                           \n[281] \"Valid Geometry\"                                           \n[282] \"Valid Geometry\"                                           \n[283] \"Valid Geometry\"                                           \n[284] \"Valid Geometry\"                                           \n[285] \"Valid Geometry\"                                           \n[286] \"Valid Geometry\"                                           \n[287] \"Valid Geometry\"                                           \n[288] \"Valid Geometry\"                                           \n[289] \"Valid Geometry\"                                           \n[290] \"Ring Self-intersection[41375.108 40432.8588999994]\"       \n[291] \"Valid Geometry\"                                           \n[292] \"Valid Geometry\"                                           \n[293] \"Valid Geometry\"                                           \n[294] \"Valid Geometry\"                                           \n[295] \"Valid Geometry\"                                           \n[296] \"Valid Geometry\"                                           \n[297] \"Valid Geometry\"                                           \n[298] \"Valid Geometry\"                                           \n[299] \"Valid Geometry\"                                           \n[300] \"Valid Geometry\"                                           \n[301] \"Valid Geometry\"                                           \n[302] \"Valid Geometry\"                                           \n[303] \"Valid Geometry\"                                           \n[304] \"Valid Geometry\"                                           \n[305] \"Valid Geometry\"                                           \n[306] \"Valid Geometry\"                                           \n[307] \"Valid Geometry\"                                           \n[308] \"Valid Geometry\"                                           \n[309] \"Valid Geometry\"                                           \n[310] \"Valid Geometry\"                                           \n[311] \"Valid Geometry\"                                           \n[312] \"Valid Geometry\"                                           \n[313] \"Valid Geometry\"                                           \n[314] \"Valid Geometry\"                                           \n[315] \"Valid Geometry\"                                           \n[316] \"Valid Geometry\"                                           \n[317] \"Valid Geometry\"                                           \n[318] \"Valid Geometry\"                                           \n[319] \"Valid Geometry\"                                           \n[320] \"Valid Geometry\"                                           \n[321] \"Valid Geometry\"                                           \n[322] \"Ring Self-intersection[21702.5623000003 48125.1154999994]\"\n[323] \"Valid Geometry\"                                           \n```\n\n\n:::\n:::\n\n\nThe below code chunk visualises the invalid geometries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninvalid_polygons <- mpsz[!st_is_valid(mpsz),]\nplot(invalid_polygons)\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nIn addressing the above point, we will use st_buffer() of sf package to compute a 5-metres buffers around the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_buffer(mpsz, dist = 2)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Bus Stops\n\nIn inspecting the sf, we noticed that when we sort the column \"BUS_STOP_N\", there are two rows that retains the geometry however there are nil indication of the bus stop number and location. Hence both of the rows will be deleted.\n\nAdditionally, in checking for duplicates through its geometry, we noticed two rows share the geometry. One is named as \"YUSEN LOGISTICS\" while the other is \"yusen logistics\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicate geometries in the eldercare sf object\nduplicate_busstop <- busstop[duplicated(busstop$geometry), ]\n\n# Display the duplicate geometries if any\nif (nrow(duplicate_busstop) > 0) {\n  print(duplicate_busstop)\n} else {\n  print(\"No duplicate geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 42187.23 ymin: 34995.78 xmax: 42187.23 ymax: 34995.78\nProjected CRS: SVY21\n     BUS_STOP_N BUS_ROOF_N        LOC_DESC                  geometry\n3195      96319        NIL YUSEN LOGISTICS POINT (42187.23 34995.78)\n```\n\n\n:::\n:::\n\n\nHence, with the above adjustments and extracting coordinates, the data is cleaned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_cleaned <- busstop %>%\n  filter(LOC_DESC != \"YUSEN LOGISTICS\")  # Delete the specified row\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract coordinates after filtering\ncoordinates <- st_coordinates(busstop_cleaned)\n\n# Add longitude and latitude columns\nbusstop_cleaned <- busstop_cleaned %>%\n  mutate(longitude = coordinates[, 1],    # First column is longitude\n         latitude = coordinates[, 2]) %>%  \n  select(LOC_DESC, longitude, latitude, geometry) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(busstop_cleaned) <- 3414\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Eldercare\n\nIn ensuring there are no duplicates the below code chunk was churned. However,we noticed that there is two rows that shares the same geometry. Through closer inspection, we realised that both addresses are formatted differently \"117 Bukit Merah View\" & \"Blk 117 Bukit Merah View #01-205\". Thus, one of the row will be deleted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicate geometries in the eldercare sf object\nduplicate_geometries <- eldercare[duplicated(eldercare$geometry), ]\n\n# Display the duplicate geometries if any\nif (nrow(duplicate_geometries) > 0) {\n  print(duplicate_geometries)\n} else {\n  print(\"No duplicate geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 13 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 23147.94 ymin: 29642.15 xmax: 41665.14 ymax: 45761.17\nProjected CRS: SVY21\nFirst 10 features:\n    OBJECTID ADDRESSBLO ADDRESSBUI ADDRESSPOS\n51        51       <NA>       <NA>     190005\n59        59       <NA>       <NA>     190008\n62        62       <NA>       <NA>     731569\n65        65       <NA>       <NA>     540182\n66        66       <NA>       <NA>     523499\n70        70       <NA>       <NA>     151117\n97        97       <NA>       <NA>     560123\n102      102       <NA>       <NA>     312062\n106      106       <NA>       <NA>     560469\n114      114       <NA>       <NA>     151117\n                              ADDRESSSTR ADDRESSTYP DESCRIPTIO HYPERLINK\n51                   5 Beach Rd #02-4915       <NA>       <NA>      <NA>\n59                 Blk 8 North Bridge Rd       <NA>       <NA>      <NA>\n62                Blk 569A Champions Way       <NA>       <NA>      <NA>\n65            Blk 182 Rivervale Crescent       <NA>       <NA>      <NA>\n66               Blk 499C Tampines Ave 9       <NA>       <NA>      <NA>\n70                  117 Bukit Merah View       <NA>       <NA>      <NA>\n97  Blk 123 Ang Mo Kio Avenue 6 #01-4011       <NA>       <NA>      <NA>\n102       62B Lorong 4 Toa Payoh #02-121       <NA>       <NA>      <NA>\n106 Blk 469 Ang Mo Kio Avenue 10 #01-940       <NA>       <NA>      <NA>\n114     Blk 117 Bukit Merah View #01-205       <NA>       <NA>      <NA>\n    LANDXADDRE LANDYADDRE                                                NAME\n51           0          0                      Peace-Connect Cluster Operator\n59           0          0                   PEACE-Connect Senior Group Home@8\n62           0          0                            Care Corner SGH @ WL569A\n65           0          0       COMNET Senior Group Home @ Rivervale Crescent\n66           0          0 Lions Befrienders Senior Group Home @ Tampines 499C\n70           0          0           NTUC Health Senior Group Home @ Henderson\n97           0          0                         AWWA Senior Activity Centre\n102          0          0          Care Corner Senior Activity Centre (TP62B)\n106          0          0   Teck Ghee Senior Activity Centre Branch @ Blk 469\n114          0          0                    Henderson Senior Activity Centre\n    PHOTOURL ADDRESSFLO          INC_CRC FMEL_UPD_D ADDRESSUNI   X_ADDR\n51      <NA>       <NA> A2C058FC1751FFE7 2016-07-28       <NA> 31505.35\n59      <NA>       <NA> D1A1515DCC76C221 2016-07-28       <NA> 31415.01\n62      <NA>       <NA> 4DC6800EF15E4B70 2016-07-28       <NA> 23147.94\n65      <NA>       <NA> 6BB0D76986F8C512 2016-07-28       <NA> 36446.37\n66      <NA>       <NA> 5DB6B9F0F16BCA80 2016-07-28       <NA> 41665.14\n70      <NA>       <NA> 7FF38742987329FE 2016-07-28       <NA> 26715.04\n97      <NA>       <NA> B275FB9D13DD7091 2016-07-28       <NA> 29261.31\n102     <NA>       <NA> 13908BA85D11F6DC 2016-07-28       <NA> 29998.73\n106     <NA>       <NA> 8F9B74A5A73579D9 2016-07-28       <NA> 30594.50\n114     <NA>       <NA> 7FF387421A0883F4 2016-07-28       <NA> 26715.04\n      Y_ADDR                  geometry\n51  31853.52 POINT (31505.35 31853.52)\n59  31880.06 POINT (31415.01 31880.06)\n62  45761.17 POINT (23147.94 45761.17)\n65  41376.90  POINT (36446.37 41376.9)\n66  37956.92 POINT (41665.14 37956.92)\n70  29642.15 POINT (26715.04 29642.15)\n97  39169.61 POINT (29261.31 39169.61)\n102 35335.92 POINT (29998.73 35335.92)\n106 38507.25  POINT (30594.5 38507.25)\n114 29642.15 POINT (26715.04 29642.15)\n```\n\n\n:::\n:::\n\n\nThe code below selects the necessary variables of ease of manipulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare_cleaned <- eldercare %>% \n  filter(INC_CRC != \"7FF38742987329FE\") %>%  #deletes the duplicated row\n  rename(longitude = X_ADDR) %>% \n  rename(latitude = Y_ADDR) %>% \n  select(NAME, longitude, latitude, geometry)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(eldercare_cleaned) <- 3414\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Hawker\n\nThe code chunk below checks if there are any duplicates geometries and it returns nil.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate_geometries <- hawker[duplicated(st_geometry(hawker)), ]\n\n# Display duplicate geometries if any\nif (nrow(duplicate_geometries) > 0) {\n  print(duplicate_geometries)\n} else {\n  print(\"No duplicate geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No duplicate geometries found.\"\n```\n\n\n:::\n:::\n\n\nAs the CRS of hawker sf is in WGS84, st_transform() is then used to transform it to SVY21.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker <- st_transform(hawker, 3414)\n```\n:::\n\n\nThe data is then split into longitude and latitude and selected columns were chosen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordinates <- st_coordinates(hawker)\nhawker_cleaned <- hawker %>%\n  mutate(longitude = coordinates[, 1],    # First column is longitude\n         latitude = coordinates[, 2]) %>%  \n  select(longitude, latitude, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Kindergarten\n\nThe code chunk below checks if there are any duplicates geometries and it returns nil.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate_kindergarten <- kindergarten[duplicated(st_geometry(kindergarten)), ]\n\n# Display duplicate geometries if any\nif (nrow(duplicate_kindergarten) > 0) {\n  print(duplicate_kindergarten)\n} else {\n  print(\"No duplicate geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 66 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 12882.62 ymin: 25596.33 xmax: 41916.49 ymax: 48384.34\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n       Name\n271 kml_271\n284 kml_284\n288 kml_288\n291 kml_291\n349 kml_349\n354 kml_354\n355 kml_355\n356 kml_356\n358 kml_358\n360 kml_360\nescription\n271                                     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>423731</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>252 Tembeling Road  #02-07 S(423731)</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Seeds D' Learning House</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>30BE9FB7740C8654</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n284                                 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>287994</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>200 Turf Club Road   S(287994)</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Swallows And Amazons Kindergarten</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>AC4EDF1099057112</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n288 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>287994</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>200, TURF CLUB ROAD, #06-08,THE GRANDSTAND, (S)287994</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>The Little House (Montessori) Kindergarten</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>AC4EDF101AAB7C05</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n291                              <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>760102</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>102 Yishun Avenue 5  #03-115 S(760102)</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Tots Town Preschool @ Yishun</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0CEB47AFBABB448C</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n349                                          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>579792</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>4 Bishan Street 13   S(579792)</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Zion Bishan Kindergarten</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>2809ADC0B5232EF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n354                                      <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>519420</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>4 Pasir Ris Drive 6</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Pentecost Methodist Church Kindergarten</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>8C80D608E5D43802</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n355                                                           <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>299574</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>1 Dunearn Close</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Pibos Garden Preschool</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>7F8CBC68533FFB92</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n356                                                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>423731</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>252 Tembeling Road #01-07</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Pink Tower Montessori</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>30BE9FB7FCB667DE</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n358                                                 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>522497</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>497C Tampines Street 45 #01-54</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Prodigy Preschool</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>724ECBCAF5159E3E</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n360                                               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSPOSTALCODE</th> <td>730408</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSSTREETNAME</th> <td>408 Woodlands Street 41</td> </tr><tr bgcolor=\"\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>DESCRIPTION</th> <td>Kindergartens</td> </tr><tr bgcolor=\"\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDXADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDYADDRESSPOINT</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>NAME</th> <td>Putra - Putri Kindergarten</td> </tr><tr bgcolor=\"\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>BA7D15B0567CD551</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201143423</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center>\n                         geometry\n271  POINT Z (36012.9 32087.99 0)\n284 POINT Z (23527.86 35684.78 0)\n288 POINT Z (23527.86 35684.78 0)\n291 POINT Z (27493.03 45816.02 0)\n349 POINT Z (30399.37 36579.97 0)\n354 POINT Z (41780.92 39252.46 0)\n355 POINT Z (25915.86 33987.34 0)\n356  POINT Z (36012.9 32087.99 0)\n358 POINT Z (41916.49 37814.51 0)\n360 POINT Z (21217.24 45620.86 0)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergarten <- st_transform(kindergarten, 3414)\n```\n:::\n\n\nThe data is then split into longitude and latitude and selected columns were chosen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordinates <- st_coordinates(kindergarten)\nkindergarten_cleaned <- kindergarten %>%\n  mutate(longitude = coordinates[, 1],    # First column is longitude\n         latitude = coordinates[, 2]) %>%  \n  select(longitude, latitude, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### School\n\nDespite importing the data and ensuring that postal code is in character form, there are still incomplete postal code as seen in the below code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(school$postal_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  [1] \"738907\" \"737916\" \"768643\" \"768928\" \"579646\" \"159016\" \"544969\" \"569785\"\n  [9] \"569206\" \"569843\" \"569920\" \"569362\" \"487012\" \"139745\" \"309919\" \"139650\"\n [17] \"227988\" \"309918\" \"529366\" \"678117\" \"679697\" \"538403\" \"679944\" \"318990\"\n [25] \"469317\" \"469722\" \"468585\" \"469293\" \"339948\" \"327919\" \"109100\" \"649930\"\n [33] \"648354\" \"547529\" \"399935\" \"658962\" \"159050\" \"689809\" \"679676\" \"598112\"\n [41] \"659634\" \"659633\" \"757714\" \"757699\" \"387621\" \"88256\"  \"518935\" \"579767\"\n [49] \"297822\" \"349692\" \"349700\" \"529894\" \"529896\" \"424821\" \"99757\"  \"449150\"\n [57] \"659401\" \"558979\" \"534793\" \"679287\" \"319765\" \"319764\" \"548595\" \"569405\"\n [65] \"99138\"  \"768959\" \"529392\" \"737924\" \"689905\" \"688845\" \"439012\" \"768547\"\n [73] \"129903\" \"129904\" \"608784\" \"545083\" \"689814\" \"648347\" \"247961\" \"609561\"\n [81] \"479226\" \"479229\" \"659441\" \"689285\" \"569277\" \"659204\" \"436895\" \"529093\"\n [89] \"529258\" \"529231\" \"828869\" \"828814\" \"518866\" \"757521\" \"573838\" \"738908\"\n [97] \"738489\" \"139648\" \"139649\" \"217567\" \"469680\" \"797538\" \"797701\" \"319252\"\n[105] \"648200\" \"739063\" \"739062\" \"609647\" \"649410\" \"158901\" \"159561\" \"389706\"\n[113] \"389705\" \"529176\" \"828848\" \"828866\" \"677744\" \"679938\" \"737942\" \"579807\"\n[121] \"519421\" \"427072\" \"278790\" \"659250\" \"534786\" \"536451\" \"327829\" \"828819\"\n[129] \"534238\" \"534256\" \"649371\" \"768857\" \"269734\" \"737888\" \"768515\" \"569228\"\n[137] \"528906\" \"528933\" \"688258\" \"609476\" \"618652\" \"648368\" \"648348\" \"609790\"\n[145] \"649038\" \"659762\" \"127368\" \"319580\" \"399772\" \"689189\" \"689333\" \"579793\"\n[153] \"579795\" \"618310\" \"659243\" \"519073\" \"408931\" \"408940\" \"368051\" \"738927\"\n[161] \"739110\" \"297754\" \"569948\" \"569384\" \"828867\" \"518798\" \"518901\" \"599986\"\n[169] \"599986\" \"658965\" \"538786\" \"538785\" \"545079\" \"545080\" \"129956\" \"128806\"\n[177] \"288683\" \"556111\" \"268097\" \"288913\" \"769028\" \"768689\" \"148812\" \"139657\"\n[185] \"449149\" \"529283\" \"545088\" \"768960\" \"544974\" \"545081\" \"768692\" \"769026\"\n[193] \"768578\" \"327830\" \"757622\" \"828671\" \"129957\" \"828716\" \"458436\" \"768454\"\n[201] \"168622\" \"544822\" \"519524\" \"518934\" \"518968\" \"529400\" \"536741\" \"536742\"\n[209] \"319320\" \"597610\" \"797702\" \"129857\" \"556094\" \"575566\" \"768687\" \"649076\"\n[217] \"529067\" \"569845\" \"659163\" \"828674\" \"828772\" \"538787\" \"828870\" \"828845\"\n[225] \"128104\" \"738525\" \"149303\" \"148800\" \"149295\" \"99840\"  \"289072\" \"318871\"\n[233] \"575954\" \"469719\" \"689621\" \"649961\" \"237993\" \"737803\" \"738524\" \"545092\"\n[241] \"555855\" \"649295\" \"138572\" \"227968\" \"757715\" \"757704\" \"545166\" \"545090\"\n[249] \"797636\" \"555889\" \"534237\" \"649332\" \"739067\" \"309437\" \"309437\" \"737913\"\n[257] \"689762\" \"737758\" \"544799\" \"529593\" \"357691\" \"359337\" \"359342\" \"469701\"\n[265] \"469700\" \"556742\" \"556140\" \"529706\" \"528986\" \"308274\" \"309331\" \"387724\"\n[273] \"259240\" \"429058\" \"455789\" \"659322\" \"518799\" \"529565\" \"529426\" \"529427\"\n[281] \"439272\" \"437259\" \"438796\" \"449761\" \"569299\" \"688261\" \"479239\" \"469278\"\n[289] \"469300\" \"465561\" \"569730\" \"688268\" \"689143\" \"828728\" \"449035\" \"448880\"\n[297] \"828802\" \"757702\" \"649223\" \"679946\" \"677737\" \"677742\" \"649188\" \"648350\"\n[305] \"519075\" \"579747\" \"738079\" \"738990\" \"738853\" \"738240\" \"738239\" \"739111\"\n[313] \"538882\" \"649036\" \"538784\" \"538789\" \"768611\" \"556108\" \"689100\" \"538720\"\n[321] \"569868\" \"768675\" \"768679\" \"768516\" \"768610\" \"469623\" \"618654\" \"609558\"\n[329] \"649406\" \"529393\" \"658712\" \"538884\" \"169485\" \"679002\" \"677741\" \"556095\"\n[337] \"556123\"\n```\n\n\n:::\n:::\n\n\nThe below code chunk churned out 3 incomplete postal codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display postal codes that are not 6 digits\ninvalid_postal_codes <- school %>%\n  filter(nchar(as.character(postal_code)) != 6) %>%\n  select(address, postal_code)\n\n# Show the result\nprint(invalid_postal_codes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  address                  postal_code\n  <chr>                    <chr>      \n1 1    Cantonment Close    88256      \n2 1    Bukit Teresa Road   99757      \n3 160  LOWER DELTA ROAD    99138      \n4 1    BUKIT PURMEI AVENUE 99840      \n```\n\n\n:::\n:::\n\n\nThe correct postal code has been changed with the assistance of Google Maps and it piped back to the main df school.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschool <- school %>% \n  mutate(postal_code = ifelse(postal_code == \"88256\", \"088256\", postal_code)) %>% \n  mutate(postal_code = ifelse(postal_code == \"99757\", \"099757\", postal_code)) %>% \n  mutate(postal_code = ifelse(postal_code == \"99840\", \"099840\", postal_code))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nschool <- school %>% \n  select(school_name, address, postal_code, mainlevel_code) %>% \n  filter(mainlevel_code ==\"PRIMARY\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npostal_list <- sort(unique(school$postal_code)) #parse a list as API cannot read df\n#unique reduces records to pass to portal\n#sort is used to easier to find geo codes\n```\n:::\n\n\nFetching Data from onemap API\n\nAs the primary schools lack of geometry coordinates, API was used to extract the coordinates.\n\nThis will return WGS84 xy coordinates alongside SVY21 xy coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(postal_list){\n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (postal in postal_list){\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=postal,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each postal code\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal_code <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(postal_code = postal, \n                           postal_found = postal_code, \n                           latitude_wgs84 = lat,\n                           longitude_wgs84 = lng)\n    }\n    \n    # If multiple results, use the exact postal code match\n    else if (found > 1){\n      # Find exact match for postal code\n      res_match <- res[res$POSTAL == postal, ]\n      \n      # If exact match found, use it\n      if (nrow(res_match) > 0) {\n        postal_code <- res_match$POSTAL[1]\n        lat <- res_match$LATITUDE[1]\n        lng <- res_match$LONGITUDE[1]\n        new_row <- data.frame(postal_code = postal,\n                             postal_found = postal_code,\n                             latitude_wgs84 = lat,\n                             longitude_wgs84 = lng)\n      }\n      # If no exact match, set as NA\n      else {\n        new_row <- data.frame(postal_code = postal,\n                             postal_found = NA,\n                             latitude_wgs84 = NA,\n                             longitude_wgs84 = NA)\n      }\n    }\n    # If no results found\n    else {\n      new_row <- data.frame(postal_code = postal,\n                           postal_found = NA,\n                           latitude_wgs84 = NA,\n                           longitude_wgs84 = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  \n  # Convert to sf object with WGS84 coordinates (EPSG:4326)\n  # Filter out rows with NA coordinates first\n  valid_coords <- postal_coords[!is.na(postal_coords$latitude_wgs84) & \n                              !is.na(postal_coords$longitude_wgs84), ]\n  \n  if(nrow(valid_coords) > 0) {\n    coords_sf <- st_as_sf(valid_coords, \n                         coords = c(\"longitude_wgs84\", \"latitude_wgs84\"),\n                         crs = 4326)\n    \n    # Transform to SVY21 (EPSG:3414)\n    coords_svy21 <- st_transform(coords_sf, 3414)\n    \n    # Extract coordinates\n    coords_matrix <- st_coordinates(coords_svy21)\n    \n    # Add SVY21 coordinates back to the original dataframe\n    valid_coords$longitude <- coords_matrix[, 1]  # SVY21 X coordinate\n    valid_coords$latitude <- coords_matrix[, 2]   # SVY21 Y coordinate\n    \n    # Add geometry column\n    valid_coords$geometry <- st_geometry(coords_svy21)\n    \n    # Merge back with rows that had NA coordinates\n    result <- merge(postal_coords, \n                   valid_coords[c(\"postal_code\", \"longitude\", \"latitude\", \"geometry\")], \n                   by = \"postal_code\", all.x = TRUE)\n  } else {\n    # If no valid coordinates, add empty SVY21 columns\n    result <- postal_coords\n    result$longitude <- NA\n    result$latitude <- NA\n    result$geometry <- NA\n  }\n  \n  return(result)\n}\n\n# Usage example:\nadd_list_school <- sort(unique(school$postal_code))\ncoords_school <- get_coords(add_list_school)\nprint(head(coords_school))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  postal_code postal_found   latitude_wgs84  longitude_wgs84 longitude latitude\n1      088256       088256 1.27547252623201 103.839962631748  28739.43 28660.79\n2      099757       099757   1.275022722964 103.828157564896  27425.62 28611.06\n3      099840       099840 1.27489701529771 103.824115781658  26975.80 28597.16\n4      109100       109100 1.27612047924037 103.808628535239  25252.19 28732.45\n5      128104       128104  1.3132658326807 103.756629101811  19465.19 32839.91\n6      128806       128806 1.31920159956387 103.761095065761  19962.23 33496.24\n                   geometry\n1 POINT (28739.43 28660.79)\n2 POINT (27425.62 28611.06)\n3  POINT (26975.8 28597.16)\n4 POINT (25252.19 28732.45)\n5 POINT (19465.19 32839.91)\n6 POINT (19962.23 33496.24)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Optional: Convert result to sf object for spatial operations\ncoords_school_sf <- st_as_sf(coords_school[!is.na(coords_school$geometry), ])\n```\n:::\n\n\nBelow is the code chunk that populates the coordinates in longitude, latitude and postal code against the address in the *add_list*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_school <- get_coords(postal_list)\nprint(coords_school)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    postal_code postal_found   latitude_wgs84  longitude_wgs84 longitude\n1        088256       088256 1.27547252623201 103.839962631748  28739.43\n2        099757       099757   1.275022722964 103.828157564896  27425.62\n3        099840       099840 1.27489701529771 103.824115781658  26975.80\n4        109100       109100 1.27612047924037 103.808628535239  25252.19\n5        128104       128104  1.3132658326807 103.756629101811  19465.19\n6        128806       128806 1.31920159956387 103.761095065761  19962.23\n7        129857       129857 1.31666529308968 103.767438999533  20668.24\n8        129903       129903 1.31506321827875 103.763144493687  20190.30\n9        139648       139648 1.30100441916733 103.785455606827  22673.28\n10       148812       148812 1.29981138884057 103.799964819895  24288.03\n11       149303       149303 1.29552905587752 103.807648475656  25143.14\n12       158901       158901 1.28559516494962 103.815547410064  26022.22\n13       159016       159016 1.29133439161334 103.824424680531  27010.19\n14       169485       169485 1.28421153855474 103.825951884637  27180.15\n15       217567       217567 1.31236867681371 103.850766402965  29941.78\n16       227988       227988 1.30935041274966 103.840950265464  28849.34\n17       237993       237993 1.29418347842837 103.836018941571  28300.53\n18       268097       268097 1.32107094241153 103.807681852799  25146.89\n19       278790       278790 1.31667646178347 103.784296227747  22544.29\n20       289072       289072 1.33004178068277 103.806397828938  25004.00\n21       297754       297754 1.34043840661368 103.839811736775  28722.62\n22       309331       309331 1.31781476118551 103.845633334522  29370.51\n23       309437       309437  1.3206340835184 103.828164966953  27426.45\n24       309918       309918 1.31837054523521 103.835609732354  28254.98\n25       319252       319252 1.34032299499938 103.855529906182  30471.88\n26       319320       319320 1.33677864390672 103.855341310212  30450.90\n27       319580       319580  1.3373381935639 103.847148501824  29539.12\n28       319765       319765 1.33275264711587 103.841847263786  28949.15\n29       327829       327829 1.32175999964553 103.857628468881  30705.45\n30       339948       339948 1.32181250780475 103.865404167629  31570.81\n31       349700       349700 1.33566084356265  103.87562006259  32707.71\n32       359337       359337 1.33140255308868 103.865117134385  31538.85\n33       387621       387621 1.32664424544839 103.882227964852  33443.12\n34       387724       387724 1.32439150290682 103.881624837373  33376.00\n35       389706       389706 1.31814416827374 103.883628501601  33599.00\n36       399772       399772 1.31099674009193 103.888352029067  34124.70\n37       408931       408931 1.32858023873554 103.901306904157  35566.41\n38       424821       424821 1.30648535277087 103.911105620496  36656.98\n39       427072       427072 1.31194344271383 103.902902557195  35744.04\n40       437259       437259 1.30498489044822 103.899999965407  35421.03\n41       449149       449149 1.30553224180437 103.917570005713  37376.41\n42       449761       449761 1.30528528687321 103.911553152326  36706.79\n43       455789       455789 1.31878997295135 103.917258129598  37341.65\n44       458436       458436 1.31996876377748 103.923752668632  38064.43\n45       469300       469300 1.31720341663064  103.94575943784  40513.58\n46       469317       469317 1.32344593287992 103.937878976352  39636.53\n47       469623       469623 1.33398037894072 103.932015036296  38983.89\n48       469680       469680 1.32980598760785 103.931710293058  38949.99\n49       469701       469701  1.3347253730189 103.941234868202  40009.96\n50       469719       469719 1.33405659580859 103.934317528484  39240.13\n51       479226       479226 1.33524602829747 103.921286435321  37789.90\n52       479239       479239 1.33109611001931 103.911005345855  36645.74\n53       518798       518798 1.37550677054835 103.934953276155  39310.69\n54       518866       518866 1.37505696315817 103.945289416873  40460.98\n55       518935       518935 1.37246063927999 103.957020286115  41766.50\n56       518968       518968 1.37245132722087 103.962922699031  42423.37\n57       519075       519075 1.36563610941695 103.960861814678  42194.05\n58       519524       519524 1.37801687647812   103.9392021807  39783.53\n59       528906       528906 1.34787074766746 103.939221709073  39785.85\n60       529067       529067 1.35765121877679 103.935246486174  39343.40\n61       529176       529176 1.35711606790292 103.949144797277  40890.13\n62       529258       529258 1.35268400746357 103.961676849165  42284.83\n63       529366       529366 1.34828400809545 103.951482746538  41150.37\n64       529392       529392 1.35061130568554 103.951317297552  41131.94\n65       529393       529393 1.35131569890862 103.950551091373  41046.67\n66       529426       529426  1.3504863946694 103.943573098509  40270.10\n67       529565       529565 1.36048786025607 103.948768900518  40848.28\n68       529706       529706 1.34967978969837 103.937016363397  39540.41\n69       529896       529896 1.34023163951633 103.952080114035  41216.89\n70       534238       534238 1.37738245231461 103.880805274557  33284.68\n71       534793       534793 1.37330297140128 103.897575728303  35151.03\n72       536451       536451 1.36693830877349 103.894114899795  34765.90\n73       536741       536741  1.3502545600894 103.884846876112  33734.52\n74       538720       538720 1.37793264345276 103.885643682171  33823.13\n75       538784       538784 1.37176798317468  103.88280991785  33507.78\n76       538786       538786 1.37362445234082 103.889741457901  34279.17\n77       538787       538787 1.37820062547641 103.894667159512  34827.33\n78       538882       538882 1.35799653782463 103.890216355459  34332.07\n79       544799       544799 1.39528544463377 103.889416413501  34242.94\n80       544822       544822 1.38376923022123 103.891354675017  34458.68\n81       544969       544969 1.39036998654612 103.887165375933  33992.45\n82       544974       544974 1.38255066171151  103.89626457548  35005.09\n83       545080       545080 1.39221149906592 103.891180928186  34439.32\n84       545088       545088 1.38706146494859 103.903202683028  35777.20\n85       545092       545092 1.39333506298213 103.904545253288  35926.59\n86       545166       545166 1.38925044778224 103.899527879229  35368.24\n87       555855       555855  1.3728583654058  103.87477170399  32613.23\n88       556095       556095 1.36026072476019 103.869712517383  32050.22\n89       556108       556108  1.3489768083841 103.868467129954  31911.64\n90       556742       556742 1.34930766795555 103.862309899986  31226.41\n91       558979       558979 1.35742952269615 103.864009397373  31415.53\n92       569228       569228 1.37196445720109 103.851763531681  30052.70\n93       569299       569299 1.36565018546903 103.851009800453  29968.82\n94       569730       569730 1.35994649477568 103.853768994775  30275.89\n95       569785       569785 1.38419941907925 103.841411716006  28900.66\n96       569920       569920 1.36932176584608 103.839630858752  28702.48\n97       569948       569948 1.37614621670476 103.835805246743  28276.74\n98       579646       579646  1.3605834338904 103.833020333986  27966.81\n99       579793       579793 1.34939813669536 103.855018233311  30414.93\n100      597610       597610 1.33807302121151 103.776250903095  21648.98\n101      598112       598112  1.3377498622588 103.766855344779  20603.35\n102      599986       599986 1.33266213599636 103.783382114018  22442.59\n103      609476       609476 1.34843859698946 103.733156566858  16853.08\n104      609558       609558 1.34291981622016 103.740861148879  17710.49\n105      609647       609647 1.33659726465816 103.736089481883  17179.43\n106      618310       618310 1.33820397704287 103.718089546664  15176.23\n107      648200       648200 1.33641298743234  103.69970173931  13129.85\n108      648347       648347 1.35148548772662 103.707578404944  14006.52\n109      648368       648368 1.33917519796104 103.698803732244  13029.92\n110      649036       649036 1.34270639669225 103.687588478681  11781.81\n111      649076       649076 1.34883617453427 103.695003812477  12607.09\n112      649188       649188  1.3477109654722 103.700467520791  13215.14\n113      649223       649223 1.34471211768915 103.698964212988  13047.82\n114      649295       649295 1.34673868889096 103.718457955487  15217.27\n115      649332       649332 1.34686967259067 103.721559387203  15562.43\n116      649930       649930 1.34284013791617 103.712858381937  14594.08\n117      659163       659163 1.34919098857585 103.740719208011  17694.72\n118      659243       659243 1.35424191127295 103.754165828711  19191.20\n119      659401       659401 1.36411948475833 103.749251919049  18644.37\n120      659441       659441  1.3591797447277  103.74847210784  18557.57\n121      659634       659634 1.34586054788695  103.75366641455  19135.59\n122      659762       659762 1.34552849960874 103.756449399351  19445.30\n123      677742       677742 1.38378546546228 103.760273432258  19871.00\n124      677744       677744  1.3858892193692 103.767794469258  20708.01\n125      679002       679002 1.37942873617052  103.76970317201  20920.40\n126      679287       679287   1.366603668561 103.767412204602  20665.41\n127      679676       679676 1.37350089986584 103.769417337654  20888.58\n128      679944       679944 1.38394936211823 103.773632022975  21357.65\n129      679946       679946 1.38917971808454  103.76639772288  20552.58\n130      688261       688261 1.38388660469396 103.753924558586  19164.46\n131      688268       688268 1.40278303219036 103.746801233973  18371.80\n132      689100       689100 1.39672603497195 103.751817992962  18930.07\n133      689189       689189 1.39356050497104 103.747362720939  18434.25\n134      689285       689285  1.3947078296399 103.743201812831  17971.20\n135      689762       689762 1.38143123987698    103.747153671  18410.93\n136      689814       689814 1.38026516111464 103.736554295636  17231.35\n137      689905       689905 1.37775890093367 103.741832917421  17818.78\n138      737803       737803 1.44700426493785 103.801889031334  24502.39\n139      737888       737888 1.42896700684852 103.790607539185  23246.90\n140      737942       737942 1.43989958331782 103.804725587384  24818.04\n141      738079       738079 1.43273620725049  103.79023031392  23204.93\n142      738240       738240 1.43485179380236  103.79741434351  24004.40\n143      738525       738525 1.44203596557592 103.788339762066  22994.56\n144      738853       738853 1.43658270720199 103.791791282236  23378.65\n145      738907       738907  1.4426347903311 103.800040119743  24296.63\n146      738908       738908 1.44414835451585 103.794545295922  23685.14\n147      738927       738927 1.43383904037059 103.773643013846  21359.01\n148      739063       739063 1.43047990810126 103.778192944298  21865.34\n149      739067       739067 1.43240935732525 103.786035065192  22738.06\n150      757521       757521 1.45388170417263 103.817174701639  26203.45\n151      757622       757622 1.45732867302094 103.814075611175  25858.57\n152      757702       757702 1.45168517614776 103.822516208087  26797.87\n153      757714       757714 1.45125024371543 103.815858858929  26057.01\n154      757715       757715  1.4457453096024 103.821152676215  26646.13\n155      768515       768515 1.42768847665227 103.830425490093  27678.04\n156      768611       768611 1.43347186925064 103.837755319448  28493.74\n157      768643       768643 1.43315271543517 103.832942401086  27958.14\n158      768679       768679 1.43397617334964 103.834050796658  28081.48\n159      768687       768687 1.41741627551251 103.830143209875  27646.63\n160      768857       768857 1.42697284512936 103.844240226564  29215.42\n161      768959       768959 1.43839562897006 103.839309173817  28666.66\n162      768960       768960 1.42745159462566 103.848378442893  29675.94\n163      769026       769026 1.42130404159807 103.840792923345  28831.79\n164      769028       769028 1.41590195697649 103.839100590207  28643.46\n165      797538       797538 1.39726966050479 103.880330305684  33231.78\n166      797636       797636  1.3925400930811 103.874984869551  32636.91\n167      797701       797701 1.39030227963797 103.874445458032  32576.88\n168      828671       828671 1.41842322079348 103.905147201163  35993.49\n169      828674       828674 1.41158455562454  103.89890448429  35298.79\n170      828716       828716 1.40507184758584 103.911200193835  36667.16\n171      828728       828728 1.40744168163777 103.898762173662  35282.97\n172      828772       828772 1.40172590450528 103.898794262307  35286.55\n173      828802       828802 1.39889261226315 103.918585924582  37489.11\n174      828819       828819   1.399550034492 103.913404855665  36912.52\n175      828845       828845 1.40505250226058 103.905299026568  36010.44\n176      828848       828848 1.39648195114256  103.91233462071  36793.43\n177      828867       828867 1.39485356081865  103.90857257736  36374.77\n178      828869       828869 1.40009139510996 103.907847599114  36294.07\n    latitude                  geometry\n1   28660.79 POINT (28739.43 28660.79)\n2   28611.06 POINT (27425.62 28611.06)\n3   28597.16  POINT (26975.8 28597.16)\n4   28732.45 POINT (25252.19 28732.45)\n5   32839.91 POINT (19465.19 32839.91)\n6   33496.24 POINT (19962.23 33496.24)\n7   33215.77 POINT (20668.24 33215.77)\n8   33038.64  POINT (20190.3 33038.64)\n9   31484.03 POINT (22673.28 31484.03)\n10  31352.08 POINT (24288.03 31352.08)\n11  30878.55 POINT (25143.14 30878.55)\n12  29780.11 POINT (26022.22 29780.11)\n13  30414.72 POINT (27010.19 30414.72)\n14  29627.11 POINT (27180.15 29627.11)\n15  32740.58 POINT (29941.78 32740.58)\n16  32406.84 POINT (28849.34 32406.84)\n17  30729.75 POINT (28300.53 30729.75)\n18  33702.84 POINT (25146.89 33702.84)\n19  33216.96 POINT (22544.29 33216.96)\n20  34694.80     POINT (25004 34694.8)\n21  35844.39 POINT (28722.62 35844.39)\n22  33342.78 POINT (29370.51 33342.78)\n23  33654.52 POINT (27426.45 33654.52)\n24  33404.23 POINT (28254.98 33404.23)\n25  35831.63 POINT (30471.88 35831.63)\n26  35439.72  POINT (30450.9 35439.72)\n27  35501.58 POINT (29539.12 35501.58)\n28  34994.53 POINT (28949.15 34994.53)\n29  33779.04 POINT (30705.45 33779.04)\n30  33784.85 POINT (31570.81 33784.85)\n31  35316.15 POINT (32707.71 35316.15)\n32  34845.27 POINT (31538.85 34845.27)\n33  34319.15 POINT (33443.12 34319.15)\n34  34070.05    POINT (33376 34070.05)\n35  33379.26    POINT (33599 33379.26)\n36  32588.94  POINT (34124.7 32588.94)\n37  34533.27 POINT (35566.41 34533.27)\n38  32090.16 POINT (36656.98 32090.16)\n39  32693.67 POINT (35744.04 32693.67)\n40  31924.22 POINT (35421.03 31924.22)\n41  31984.80  POINT (37376.41 31984.8)\n42  31957.47 POINT (36706.79 31957.47)\n43  33450.77 POINT (37341.65 33450.77)\n44  33581.14 POINT (38064.43 33581.14)\n45  33275.46 POINT (40513.58 33275.46)\n46  33965.69 POINT (39636.53 33965.69)\n47  35130.51 POINT (38983.89 35130.51)\n48  34668.92 POINT (38949.99 34668.92)\n49  35212.93 POINT (40009.96 35212.93)\n50  35138.95 POINT (39240.13 35138.95)\n51  35270.41  POINT (37789.9 35270.41)\n52  34811.50  POINT (36645.74 34811.5)\n53  39722.31 POINT (39310.69 39722.31)\n54  39672.62 POINT (40460.98 39672.62)\n55  39385.60   POINT (41766.5 39385.6)\n56  39384.60  POINT (42423.37 39384.6)\n57  38630.99 POINT (42194.05 38630.99)\n58  39999.88 POINT (39783.53 39999.88)\n59  36666.47 POINT (39785.85 36666.47)\n60  37747.93  POINT (39343.4 37747.93)\n61  37688.82 POINT (40890.13 37688.82)\n62  37198.82 POINT (42284.83 37198.82)\n63  36712.23 POINT (41150.37 36712.23)\n64  36969.57 POINT (41131.94 36969.57)\n65  37047.45 POINT (41046.67 37047.45)\n66  36955.72  POINT (40270.1 36955.72)\n67  38061.66 POINT (40848.28 38061.66)\n68  36866.50  POINT (39540.41 36866.5)\n69  35821.84 POINT (41216.89 35821.84)\n70  39929.52 POINT (33284.68 39929.52)\n71  39478.48 POINT (35151.03 39478.48)\n72  38774.69  POINT (34765.9 38774.69)\n73  36929.87 POINT (33734.52 36929.87)\n74  39990.37 POINT (33823.13 39990.37)\n75  39308.71 POINT (33507.78 39308.71)\n76  39514.00    POINT (34279.17 39514)\n77  40020.03 POINT (34827.33 40020.03)\n78  37785.95 POINT (34332.07 37785.95)\n79  41909.17 POINT (34242.94 41909.17)\n80  40635.77 POINT (34458.68 40635.77)\n81  41365.63 POINT (33992.45 41365.63)\n82  40501.04 POINT (35005.09 40501.04)\n83  41569.27 POINT (34439.32 41569.27)\n84  40999.84  POINT (35777.2 40999.84)\n85  41693.55 POINT (35926.59 41693.55)\n86  41241.87 POINT (35368.24 41241.87)\n87  39429.26 POINT (32613.23 39429.26)\n88  38036.27 POINT (32050.22 38036.27)\n89  36788.55 POINT (31911.64 36788.55)\n90  36825.12 POINT (31226.41 36825.12)\n91  37723.20  POINT (31415.53 37723.2)\n92  39330.38  POINT (30052.7 39330.38)\n93  38632.18 POINT (29968.82 38632.18)\n94  38001.50  POINT (30275.89 38001.5)\n95  40683.26 POINT (28900.66 40683.26)\n96  39038.16 POINT (28702.48 39038.16)\n97  39792.77 POINT (28276.74 39792.77)\n98  38071.92 POINT (27966.81 38071.92)\n99  36835.12 POINT (30414.93 36835.12)\n100 35582.91 POINT (21648.98 35582.91)\n101 35547.20  POINT (20603.35 35547.2)\n102 34984.58 POINT (22442.59 34984.58)\n103 36729.23 POINT (16853.08 36729.23)\n104 36118.96 POINT (17710.49 36118.96)\n105 35419.87 POINT (17179.43 35419.87)\n106 35597.61 POINT (15176.23 35597.61)\n107 35399.68 POINT (13129.85 35399.68)\n108 37066.28 POINT (14006.52 37066.28)\n109 35705.12 POINT (13029.92 35705.12)\n110 36095.65 POINT (11781.81 36095.65)\n111 36773.40  POINT (12607.09 36773.4)\n112 36648.95 POINT (13215.14 36648.95)\n113 36317.36 POINT (13047.82 36317.36)\n114 36541.34 POINT (15217.27 36541.34)\n115 36555.81 POINT (15562.43 36555.81)\n116 36110.29 POINT (14594.08 36110.29)\n117 36812.40  POINT (17694.72 36812.4)\n118 37370.85  POINT (19191.2 37370.85)\n119 38463.08 POINT (18644.37 38463.08)\n120 37916.87 POINT (18557.57 37916.87)\n121 36444.08 POINT (19135.59 36444.08)\n122 36407.36  POINT (19445.3 36407.36)\n123 40637.61    POINT (19871 40637.61)\n124 40870.21 POINT (20708.01 40870.21)\n125 40155.83  POINT (20920.4 40155.83)\n126 38737.71 POINT (20665.41 38737.71)\n127 39500.36 POINT (20888.58 39500.36)\n128 40655.69 POINT (21357.65 40655.69)\n129 41234.06 POINT (20552.58 41234.06)\n130 40648.81 POINT (19164.46 40648.81)\n131 42738.31  POINT (18371.8 42738.31)\n132 42068.54 POINT (18930.07 42068.54)\n133 41718.53 POINT (18434.25 41718.53)\n134 41845.41  POINT (17971.2 41845.41)\n135 40377.34 POINT (18410.93 40377.34)\n136 40248.44 POINT (17231.35 40248.44)\n137 39971.29 POINT (17818.78 39971.29)\n138 47627.92 POINT (24502.39 47627.92)\n139 45633.47  POINT (23246.9 45633.47)\n140 46842.32 POINT (24818.04 46842.32)\n141 46050.25 POINT (23204.93 46050.25)\n142 46284.17  POINT (24004.4 46284.17)\n143 47078.58 POINT (22994.56 47078.58)\n144 46475.58 POINT (23378.65 46475.58)\n145 47144.77 POINT (24296.63 47144.77)\n146 47312.14 POINT (23685.14 47312.14)\n147 46172.24 POINT (21359.01 46172.24)\n148 45800.79 POINT (21865.34 45800.79)\n149 46014.12 POINT (22738.06 46014.12)\n150 48388.38 POINT (26203.45 48388.38)\n151 48769.53 POINT (25858.57 48769.53)\n152 48145.49 POINT (26797.87 48145.49)\n153 48097.40  POINT (26057.01 48097.4)\n154 47488.69 POINT (26646.13 47488.69)\n155 45492.05 POINT (27678.04 45492.05)\n156 46131.55 POINT (28493.74 46131.55)\n157 46096.26 POINT (27958.14 46096.26)\n158 46187.32 POINT (28081.48 46187.32)\n159 44356.21 POINT (27646.63 44356.21)\n160 45412.93 POINT (29215.42 45412.93)\n161 46676.00    POINT (28666.66 46676)\n162 45465.87 POINT (29675.94 45465.87)\n163 44786.10  POINT (28831.79 44786.1)\n164 44188.76 POINT (28643.46 44188.76)\n165 42128.55 POINT (33231.78 42128.55)\n166 41605.56 POINT (32636.91 41605.56)\n167 41358.12 POINT (32576.88 41358.12)\n168 44467.67 POINT (35993.49 44467.67)\n169 43711.47 POINT (35298.79 43711.47)\n170 42991.37 POINT (36667.16 42991.37)\n171 43253.37 POINT (35282.97 43253.37)\n172 42621.35 POINT (35286.55 42621.35)\n173 42308.13 POINT (37489.11 42308.13)\n174 42380.80  POINT (36912.52 42380.8)\n175 42989.21 POINT (36010.44 42989.21)\n176 42041.54 POINT (36793.43 42041.54)\n177 41861.47 POINT (36374.77 41861.47)\n178 42440.64 POINT (36294.07 42440.64)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine latitude and longitude in `coords` int a single \"geometry\" column and convert to an sf object\ncoords_school <- coords_school %>%\n  select(postal_code, geometry)\n```\n:::\n\n\n`Following which, the coords_sf is then combined to the resale_selected df by address, forming a new df resale_geom`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschool_cleaned <- school %>% \n  left_join(coords_school, by = \"postal_code\")\n```\n:::\n\n\nIn the code chunk, we will extract the longitude and latitude from the geometry to facilitate transforming into sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschool_cleaned <- school_cleaned %>%\n  mutate(\n    longitude = st_coordinates(geometry)[, 1],  # Extract longitude\n    latitude = st_coordinates(geometry)[, 2]    # Extract latitude\n  )\n```\n:::\n\n\nThen, we are able to transform this into sf with the new longitude and latitude columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschool_cleaned<- st_as_sf(school_cleaned, coords = c(\"longitude\", \"latitude\"), crs = 3414)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Malls\n\nAs the af *mall* was in WGS84, it will transformed into SVY21 EPSG 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an sf object with WGS 84 CRS\nmall <- st_as_sf(mall, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n# Transform to EPSG:3414\nmall_cleaned <- st_transform(mall, crs = 3414)\n```\n:::\n\n\nFrom the code below, we noticed that there are two malls that are duplicated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_text <- st_as_text(st_geometry(mall_cleaned))\n\n# Find duplicated geometries\nduplicates <- mall_cleaned[duplicated(geom_text) | duplicated(geom_text, fromLast = TRUE), ]\n\n# Print summary\nprint(paste(\"Number of duplicate geometries found:\", nrow(duplicates)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of duplicate geometries found: 4\"\n```\n\n\n:::\n\n```{.r .cell-code}\nif(nrow(duplicates) > 0) {\n  print(\"\\nDuplicate records:\")\n  print(duplicates)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\\nDuplicate records:\"\nSimple feature collection with 4 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 29695.5 ymin: 34261.3 xmax: 38710.09 ymax: 36920.73\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 4 × 2\n  `Mall Name`                  geometry\n  <chr>                     <POINT [m]>\n1 Junction 8         (29695.5 36920.73)\n2 Djitsun Mall Bedok (38710.09 34261.3)\n3 Djitsun Mall       (38710.09 34261.3)\n4 Junction 8         (29695.5 36920.73)\n```\n\n\n:::\n:::\n\n\nHence, with the code below, we will remove the duplicate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert geometry to text for comparison\ngeom_text <- st_as_text(st_geometry(mall_cleaned))\n\n# Add row numbers to track which entries we keep\nmall_cleaned$row_num <- 1:nrow(mall_cleaned)\n\n# Remove duplicates, keeping first occurrence only\nmall_cleaned<- mall_cleaned[!duplicated(geom_text), ]\n\nmall_cleaned <- mall_cleaned %>% \n  select(`Mall Name`, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Park\n\nThe code chunk below checks if there are any duplicates geometries and it returns nil.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the geometries as text for easier comparison\ngeom_park <- st_as_text(st_geometry(park))\n\n# Find duplicated geometries\nduplicates_park <- park[duplicated(geom_park) | duplicated(geom_park, fromLast = TRUE), ]\n```\n:::\n\n\nAs the sf park was in WGS84, it will transformed into SVY21 EPSG 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an sf object with WGS 84 CRS\npark <- st_as_sf(park, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n\n# Transform to EPSG:3414\npark_cleaned <- st_transform(park, crs = 3414)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### MRT\n\nLet's take a quick glimpse at the data. We noticed that there duplicated station names, depots, command centres (i.e. BOCC - to which I derived it as a [Bus Operations Control Centre](https://landtransportguru.net/trapeze-common-fleet-management-system/seletar-bus-depot-interiors-7/), stations that are under construction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mrt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 230\nColumns: 6\n$ TYP_CD     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ STN_NAM    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ATTACHEMEN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TYP_CD_DES <chr> \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"LR…\n$ STN_NAM_DE <chr> \"GALI BATU DEPOT\", \"HILLVIEW MRT STATION\", \"BEAUTY WORLD MR…\n$ geometry   <POLYGON [m]> POLYGON ((19210.61 41858.04..., POLYGON ((20650.33 …\n```\n\n\n:::\n:::\n\n\nThus, with the code chunk below, we use the duplicate function to check which are the duplciated stations. Noticeably, these stations are actually interchange where it consists of more than 1 metro line (i.e. Outram Park where it houses East-West, Thomson-EastCoast, and North-East Line). However, Bayshore MRT isn't an interchange but there are 2 duplicates of it that is likely due to the construction of Bedok South where both links. Regardless, the decision to keep these variables retains as it serves as an important proximate to the residential areas in geospatial setting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplicates in the STN_NAM_DE column and display the whole rows\nduplicates <- mrt %>%\n  group_by(STN_NAM_DE) %>%\n  filter(n() > 1) %>%\n  ungroup()\n\n# Display duplicates if any\nif (nrow(duplicates) > 0) {\n  print(duplicates)\n} else {\n  print(\"No duplicates found in the STN_NAM_DE column.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 50 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 22616.72 ymin: 27478.44 xmax: 42456.47 ymax: 46579.58\nProjected CRS: SVY21\n# A tibble: 50 × 6\n   TYP_CD STN_NAM ATTACHEMEN     TYP_CD_DES STN_NAM_DE                  geometry\n    <int> <chr>   <chr>          <chr>      <chr>                  <POLYGON [m]>\n 1      0 <NA>    <NA>           MRT        DHOBY GHA… ((29293.51 31312.53, 293…\n 2      0 <NA>    CC15_BSH STN.… MRT        BISHAN MR… ((29683.2 37087.82, 2970…\n 3      0 <NA>    CC13_SER STN.… MRT        SERANGOON… ((32244.31 36987.67, 322…\n 4      0 <NA>    <NA>           MRT        TAMPINES … ((40488.79 37181.92, 404…\n 5      0 <NA>    <NA>           MRT        STEVENS M… ((27140.4 33629.43, 2714…\n 6      0 <NA>    CC10_MPS STN.… MRT        MACPHERSO… ((34310.59 34386.88, 343…\n 7      0 <NA>    C504_S_CGA_MA… MRT        EXPO MRT … ((42293.7 35208.13, 4229…\n 8      0 <NA>    NE1_HBF STN.z… MRT        HARBOURFR… ((26584.75 27512.49, 265…\n 9      0 <NA>    CE2_MRB STN.z… MRT        MARINA BA… ((30397.79 28652.09, 303…\n10      0 <NA>    CC9_PYL STN.z… MRT        PAYA LEBA… ((34495.6 33384.44, 3452…\n# ℹ 40 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(duplicates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 50\nColumns: 6\n$ TYP_CD     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ STN_NAM    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ATTACHEMEN <chr> NA, \"CC15_BSH STN.zip\", \"CC13_SER STN.zip\", NA, NA, \"CC10_M…\n$ TYP_CD_DES <chr> \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MRT\", \"MR…\n$ STN_NAM_DE <chr> \"DHOBY GHAUT MRT STATION\", \"BISHAN MRT STATION\", \"SERANGOON…\n$ geometry   <POLYGON [m]> POLYGON ((29293.51 31312.53..., POLYGON ((29683.2 3…\n```\n\n\n:::\n:::\n\n\n[![MRT System Map](images/Screenshot%202024-11-03%20at%2014.58.56.png){fig-align=\"center\"}](https://www.lta.gov.sg/content/dam/ltagov/getting_around/public_transport/rail_network/image/SM_TEL4_Eng_(Ver150824)_TL_Main.pdf)\n\nIn the below code chunk, we will cross-check with the MRT map above and remove the names are that are depots, operation centres, sub stations and columns that are not needed. The code chunks includes stations with \"MRT STATION\" or \"LRT STATION\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt_cleaned <- mrt %>%\n  select(-TYP_CD, -STN_NAM, -ATTACHEMEN) %>%  # Remove specified columns\n  filter(grepl(\"MRT STATION|LRT STATION\", STN_NAM_DE, ignore.case = TRUE))  # Filter rows\n\n# Display the cleaned sf object\nprint(mrt_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 215 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\nFirst 10 features:\n   TYP_CD_DES                STN_NAM_DE                       geometry\n1         MRT      HILLVIEW MRT STATION POLYGON ((20650.33 38282.33...\n2         MRT  BEAUTY WORLD MRT STATION POLYGON ((21594.72 35882.94...\n3         MRT          HUME MRT STATION POLYGON ((20808 37457.72, 2...\n4         MRT BUKIT PANJANG MRT STATION POLYGON ((19996.27 40187.21...\n5         MRT        CASHEW MRT STATION POLYGON ((20340.38 39136.76...\n6         MRT   DHOBY GHAUT MRT STATION POLYGON ((29293.51 31312.53...\n7         MRT      LAVENDER MRT STATION POLYGON ((31236.5 32085.76,...\n8         LRT       RENJONG LRT STATION POLYGON ((34382.66 40949.64...\n9         MRT         DOVER MRT STATION POLYGON ((21987.25 32576.91...\n10        LRT       PHOENIX LRT STATION POLYGON ((19602.92 40048.64...\n```\n\n\n:::\n:::\n\n\nIn the list, we noticed that some of the MRT stations are actually under construction. Hence we cross-checked with the MRT map above and exclude those that are under construction.\n\nFirst, we create a list of excluded MRT list. Then we use Regex to exclude it using if function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the words to exclude\nwords_to_exclude <- c(\"HUME\", \"SUNGEI BEDOK\", \"BEDOK SOUTH\", \"XILIN\", \n                       \"PUNGGOL COAST\", \"BUKIT BROWN\", \"MOUNT PLEASANT\", \n                       \"FOUNDERS' MEMORIAL\")\n\n# Create a regular expression pattern to match any of the words\npattern <- paste(words_to_exclude, collapse = \"|\")\n\n# Ensure the train object is an sf object\nif (!inherits(mrt_cleaned, \"sf\")) {\n  stop(\"The 'train' object is not an sf object.\")\n}\n\n# Filter the train sf object to exclude rows with specified words in STN_NAM_DE\nmrt_cleaned  <- mrt_cleaned %>%\n  filter(!str_detect(STN_NAM_DE, regex(pattern, ignore_case = TRUE)))\n\n# Verify the results\nprint(head(mrt_cleaned))  # Print the first few rows of the filtered object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 19932.72 ymin: 31220.26 xmax: 31375.01 ymax: 40255.73\nProjected CRS: SVY21\n  TYP_CD_DES                STN_NAM_DE                       geometry\n1        MRT      HILLVIEW MRT STATION POLYGON ((20650.33 38282.33...\n2        MRT  BEAUTY WORLD MRT STATION POLYGON ((21594.72 35882.94...\n3        MRT BUKIT PANJANG MRT STATION POLYGON ((19996.27 40187.21...\n4        MRT        CASHEW MRT STATION POLYGON ((20340.38 39136.76...\n5        MRT   DHOBY GHAUT MRT STATION POLYGON ((29293.51 31312.53...\n6        MRT      LAVENDER MRT STATION POLYGON ((31236.5 32085.76,...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(mrt_cleaned )      # Summary of the filtered object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  TYP_CD_DES         STN_NAM_DE                 geometry  \n Length:211         Length:211         POLYGON      :211  \n Class :character   Class :character   epsg:NA      :  0  \n Mode  :character   Mode  :character   +proj=tmer...:  0  \n```\n\n\n:::\n:::\n\n\nWe will then view() the mrt_cleaned sf and search for the excluded MRT stations in ensuring that it is not there.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nview(mrt_cleaned)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mrt_cleaned) <- 3414\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Supermarket\n\nThe code chunk below checks if there are any duplicates geometries and it returns several duplicates.\n\nIn the table below, we noticed that there are 33 rows of geometries returned with 2-4 duplicates in each geometry. In explaining this issue, we can zoom into the description column and it will surface different supermarket names sharing the same geometry. This is likely due to the changing of the tenants.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket = read_rds(\"data/rds/geospatial/supermarket.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find duplicated geometries\nduplicate_ids <- supermarket %>%\n  filter(duplicated(st_geometry(.)) | duplicated(st_geometry(.), fromLast = TRUE)) %>%\n  select(geometry) %>%\n  unique() %>%\n  pull(geometry)\n\n# Create a table with duplicates together in a row and count\nduplicates_table <- supermarket %>%\n  filter(st_geometry(geometry) %in% duplicate_ids) %>%\n  group_by(geometry) %>%\n  summarise(duplicate_entries = list(cur_data()), \n            count = n(),         # Count the number of duplicates\n            .groups = 'drop')\n\n# View the duplicated entries together in a row with counts\nif (nrow(duplicates_table) > 0) {\n  print(\"Duplicated geometries found:\")\n  print(duplicates_table)\n  total_duplicates <- sum(duplicates_table$count)\n  cat(\"Total number of duplicates:\", total_duplicates, \"\\n\")\n} else {\n  print(\"No duplicated geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Duplicated geometries found:\"\nSimple feature collection with 33 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6342 ymin: 1.27031 xmax: 103.9624 ymax: 1.451325\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n# A tibble: 33 × 3\n                  geometry duplicate_entries count\n               <POINT [°]> <list>            <int>\n 1 Z (103.8142 1.322573 0) <tibble [2 × 2]>      2\n 2  Z (103.7627 1.37835 0) <tibble [2 × 2]>      2\n 3 Z (103.8007 1.439916 0) <tibble [2 × 2]>      2\n 4  Z (103.857 1.307785 0) <tibble [2 × 2]>      2\n 5 Z (103.9132 1.402878 0) <tibble [2 × 2]>      2\n 6 Z (103.8435 1.274588 0) <tibble [2 × 2]>      2\n 7 Z (103.9051 1.301191 0) <tibble [4 × 2]>      4\n 8 Z (103.8945 1.314692 0) <tibble [2 × 2]>      2\n 9 Z (103.7653 1.303583 0) <tibble [2 × 2]>      2\n10 Z (103.7882 1.306849 0) <tibble [2 × 2]>      2\n# ℹ 23 more rows\nTotal number of duplicates: 74 \n```\n\n\n:::\n:::\n\n\nIn addressing the duplicate, only one geometry will be retained while the rest will be eradicated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove duplicates while retaining unique geometries\nsupermarket <- supermarket %>%\n  distinct(geometry, .keep_all = TRUE)  # Keep all columns for the unique geometries\n```\n:::\n\n\nFollowing which, we can check again to see if there's any duplicates remaining and it returns nil.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find duplicated geometries\nduplicate_ids <- supermarket %>%\n  filter(duplicated(st_geometry(.)) | duplicated(st_geometry(.), fromLast = TRUE)) %>%\n  select(geometry) %>%\n  unique() %>%\n  pull(geometry)\n\n# Create a table with duplicates together in a row and count\nduplicates_table <- supermarket %>%\n  filter(st_geometry(geometry) %in% duplicate_ids) %>%\n  group_by(geometry) %>%\n  summarise(duplicate_entries = list(cur_data()), \n            count = n(),         # Count the number of duplicates\n            .groups = 'drop')\n\n# View the duplicated entries together in a row with counts\nif (nrow(duplicates_table) > 0) {\n  print(\"Duplicated geometries found:\")\n  print(duplicates_table)\n  total_duplicates <- sum(duplicates_table$count)\n  cat(\"Total number of duplicates:\", total_duplicates, \"\\n\")\n} else {\n  print(\"No duplicated geometries found.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No duplicated geometries found.\"\n```\n\n\n:::\n:::\n\n\nThe data is then transformed from WGS84 to SVY21.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an sf object with WGS 84 CRS\nsupermarket <- st_as_sf(supermarket, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326)\n\n# Transform to EPSG:3414\nsupermarket_cleaned <- st_transform(supermarket, crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordinates <- st_coordinates(supermarket_cleaned)\nsupermarket_cleaned <- supermarket_cleaned %>%\n  mutate(longitude = coordinates[, 1],    # First column is longitude\n         latitude = coordinates[, 2]) %>%  \n  select(longitude, latitude, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Computing Proximity to Resale Transactions\n\n#### Bus Stop\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create busstop_resale with just the two columns we want\nbusstop_resale <- data.frame(\n  busstop_prox = numeric(nrow(resale_geom)),\n  within_350m_busstop = numeric(nrow(resale_geom)))\n\n# Loop through each resale point\nfor (i in 1:nrow(resale_geom)) {\n  # Get current resale point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all bus stops\n  distances <- st_distance(current_point, busstop_cleaned)\n  \n  # Store minimum distance in km in busstop_prox\n  busstop_resale$busstop_prox[i] <- as.numeric(min(distances)) / 1000\n  \n  # Count bus stops within 350 meters\n  busstop_resale$within_350m_busstop[i] <- sum(as.numeric(distances) <= 350)\n}\n\n# Verify results\nprint(head(busstop_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  busstop_prox within_350m_busstop\n1   0.09807302                  10\n2   0.11396279                   6\n3   0.12282400                   3\n4   0.12282400                   3\n5   0.10566508                   3\n6   0.16643716                   6\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(busstop_resale)                 # Summary of both columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  busstop_prox     within_350m_busstop\n Min.   :0.01543   Min.   : 0.000     \n 1st Qu.:0.07418   1st Qu.: 6.000     \n Median :0.10727   Median : 8.000     \n Mean   :0.11449   Mean   : 7.907     \n 3rd Qu.:0.14582   3rd Qu.:10.000     \n Max.   :0.39147   Max.   :19.000     \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Eldercare\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\neldercare_resale <- data.frame(\n  eldercare_prox = numeric(nrow(resale_geom)),\n  within_350m_eldercare = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, eldercare_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  eldercare_resale$eldercare_prox[i] <- as.numeric(min(distances)) / 1000\n  \n  # Count eldercare facilities within 350 meters\n  eldercare_resale$within_350m_eldercare[i] <- sum(as.numeric(distances) <= 350)\n}\n\n# Verify results\nprint(head(eldercare_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  eldercare_prox within_350m_eldercare\n1      0.3419924                     1\n2      0.2597442                     1\n3      0.2811279                     1\n4      0.2811279                     1\n5      0.4296838                     0\n6      0.4043587                     0\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(eldercare_resale)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n eldercare_prox   within_350m_eldercare\n Min.   :0.0000   Min.   :0.0000       \n 1st Qu.:0.3303   1st Qu.:0.0000       \n Median :0.6308   Median :0.0000       \n Mean   :0.7983   Mean   :0.3898       \n 3rd Qu.:1.0931   3rd Qu.:1.0000       \n Max.   :4.7675   Max.   :7.0000       \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Hawker\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\nhawker_resale <- data.frame(\n  hawker_prox = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, hawker_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  hawker_resale$hawker_prox[i] <- as.numeric(min(distances)) / 1000\n  \n}\n\n# Verify results\nprint(head(hawker_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  hawker_prox\n1   0.1861061\n2   0.4248262\n3   0.3108075\n4   0.3108075\n5   0.3143604\n6   0.1378719\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Kindergarten\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\nkindergarten_resale <- data.frame(\n  kindergarten_prox = numeric(nrow(resale_geom)),\n  within_350m_kindergarten = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, kindergarten_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  kindergarten_resale$kindergarten_prox[i] <- as.numeric(min(distances)) / 1000\n  \n  # Count eldercare facilities within 350 meters\n  kindergarten_resale$within_350m_kindergarten[i] <- sum(as.numeric(distances) <= 350)\n}\n\n# Verify results\nprint(head(kindergarten_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  kindergarten_prox within_350m_kindergarten\n1         0.5507577                        0\n2         0.2085693                        1\n3         0.2082784                        1\n4         0.2082784                        1\n5         0.1232351                        1\n6         0.1951542                        2\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(kindergarten_resale)   # Summary of both columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n kindergarten_prox within_350m_kindergarten\n Min.   :0.0000    Min.   :0.0000          \n 1st Qu.:0.1773    1st Qu.:0.0000          \n Median :0.2810    Median :1.0000          \n Mean   :0.3052    Mean   :0.9791          \n 3rd Qu.:0.4021    3rd Qu.:1.0000          \n Max.   :3.1675    Max.   :8.0000          \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)              \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Malls\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#change CRS of mall_cleaned to align to CRS EPSG 3414 \nst_crs(mall_cleaned) <- 3414\n\n# Create eldercare_resale with just the two columns we want\nmall_resale <- data.frame(\n  mall_prox = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, mall_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  mall_resale$mall_prox[i] <- as.numeric(min(distances)) / 1000\n  \n}\n\n# Verify results\nprint(head(mall_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mall_prox\n1  48.70776\n2  48.80401\n3  48.81649\n4  48.81649\n5  48.60214\n6  48.12243\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### MRT\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\nmrt_resale <- data.frame(\n  mrt_prox = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, mrt_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  mrt_resale$mrt_prox[i] <- as.numeric(min(distances)) / 1000\n  \n}\n\n# Verify results\nprint(head(mrt_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mrt_prox\n1 0.90926089\n2 0.27613980\n3 0.33461983\n4 0.33461983\n5 0.06951106\n6 0.39898970\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Park\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\npark_resale <- data.frame(\n  park_prox = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, park_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  park_resale$park_prox[i] <- as.numeric(min(distances)) / 1000\n  \n}\n\n# Verify results\nprint(head(park_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  park_prox\n1 0.2815657\n2 0.3108840\n3 0.3411321\n4 0.3411321\n5 0.2436839\n6 0.1985831\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### School\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\nschool_resale <- data.frame(\n  school_prox = numeric(nrow(resale_geom)),\n  within_1km_school = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, school_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  school_resale$school_prox[i] <- as.numeric(min(distances)) / 1000\n  \n  # Count eldercare facilities within 1000 meters\n  school_resale$within_1km_school[i] <- sum(as.numeric(distances) <= 1000)\n}\n\n# Verify results\nprint(head(school_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  school_prox within_1km_school\n1   0.2279026                 2\n2   0.4437104                 3\n3   0.1210031                 3\n4   0.1210031                 3\n5   0.2472647                 2\n6   0.2692533                 2\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(school_resale)   # Summary of both columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  school_prox      within_1km_school\n Min.   :0.04354   Min.   :0.000    \n 1st Qu.:0.24063   1st Qu.:2.000    \n Median :0.37618   Median :3.000    \n Mean   :0.42942   Mean   :2.979    \n 3rd Qu.:0.54703   3rd Qu.:4.000    \n Max.   :3.29166   Max.   :9.000    \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)    \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Supermarkets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create eldercare_resale with just the two columns we want\nsupermarket_resale <- data.frame(\n  supermarket_prox = numeric(nrow(resale_geom)))\n\n# Loop through each point in busstop_resale\nfor (i in 1:nrow(resale_geom)) {\n  # Get current point\n  current_point <- resale_geom[i, ]\n  \n  # Calculate distances to all eldercare centers\n  distances <- st_distance(current_point, supermarket_cleaned)\n  \n  # Store minimum distance in km in eldercare_prox\n  supermarket_resale$supermarket_prox[i] <- as.numeric(min(distances)) / 1000\n  \n}\n\n# Verify results\nprint(head(supermarket_resale))             # Print the first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  supermarket_prox\n1        0.3872724\n2        0.1666790\n3        0.3212926\n4        0.3212926\n5        0.3413032\n6        0.1577571\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Visualisations\n\nIn the code chunk below, we are able to view the mininum, maximum, median and quadrants of the data. Interesting, the minimum and maximum resale price were \\$150,000 and \\$1.58m. And the smallest age of unit was 3 whereas the oldest was 58.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(resale_geom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   address              town            resale_price        month          \n Length:47423       Length:47423       Min.   : 150000   Length:47423      \n Class :character   Class :character   1st Qu.: 460000   Class :character  \n Mode  :character   Mode  :character   Median : 565000   Mode  :character  \n                                       Mean   : 587538                     \n                                       3rd Qu.: 685000                     \n                                       Max.   :1588000                     \n  flat_type         floor_area_sqm   remaining_lease_yr   longitude    \n Length:47423       Min.   : 31.00   Min.   :41.0       Min.   :11519  \n Class :character   1st Qu.: 74.00   1st Qu.:60.0       1st Qu.:21661  \n Mode  :character   Median : 93.00   Median :73.0       Median :29281  \n                    Mean   : 95.22   Mean   :73.3       Mean   :28655  \n                    3rd Qu.:111.00   3rd Qu.:90.0       3rd Qu.:35078  \n                    Max.   :366.70   Max.   :96.0       Max.   :45192  \n    latitude              geometry        unit_age   \n Min.   :28098   POINT        :47423   Min.   : 3.0  \n 1st Qu.:35670   epsg:3414    :    0   1st Qu.: 9.0  \n Median :38929   +proj=tmer...:    0   Median :26.0  \n Mean   :39069                         Mean   :25.7  \n 3rd Qu.:42401                         3rd Qu.:39.0  \n Max.   :48741                         Max.   :58.0  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nWe will use tmap to create an iteractive map of the resale prices. Noticebly, the \"hotter\" resale flats are concentrated in the south and middle area with scatters around the east and west.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(mpsz)+\n  tm_polygons() +\ntm_shape(resale_geom) +  \n  tm_dots(col = \"resale_price\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-129-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(mpsz)+\n  tm_polygons() +\ntm_shape(resale_geom) +  \n  tm_dots(col = \"unit_age\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-130-1.png){width=672}\n:::\n:::\n\n\nIn barchart below, we have populated the percentage of transactions stratified by town. Visibly, Punggol attains the highest 7.7% followed by Woodlands at 7.6%. Hence We would want to predict the HDB resale prices for these two towns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntown_percentages <- resale_geom %>%\n  group_by(town) %>%\n  summarise(count = n()) %>%\n  mutate(percentage = (count/sum(count))*100) %>%\n  arrange(desc(percentage))  # Sort in descending order\n\n# Create the bar chart\nggplot(town_percentages, aes(x = reorder(town, -percentage), y = percentage)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  geom_text(aes(label = sprintf(\"%.1f%%\", percentage)), \n            vjust = -0.5, \n            size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Percentage Distribution of Resale Transactions by Town\",\n       x = \"Town\",\n       y = \"Percentage of Total Transactions (%)\")\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-131-1.png){width=672}\n:::\n:::\n\n\n## Final Amendments\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- resale_geom %>%\n  cbind(busstop_resale, eldercare_resale, hawker_resale,\n            kindergarten_resale, mall_resale, mrt_resale,\n            park_resale, school_resale, supermarket_resale)\n```\n:::\n\n\nFirstly, we will change the column \"month\" to POSIXct for easier manipulation.\n\nAs we are focusing on 4-room HDB flats, we will filter according to that.\n\nLastly, as we're working with an sf (spatial features) object, we need to use a different approach to remove columns instead of using dplyr. We will use select(!matches) to remove the column address.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>%\n  mutate(month = as.POSIXct(paste0(month, \"-01\"), format = \"%Y-%m-%d\")) %>% \n  filter(flat_type == \"4 ROOM\") %>% # Change from int to num\n  select(-c(address, flat_type)) %>% \n  mutate(remaining_lease_yr = as.numeric(remaining_lease_yr)) # Change from int to num\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Machine Learning\n\n### Data Sampling\n\nThe entire data are split into training (Jan 2023 - June 2024) and testing (July 2024 - Sept 2024) data sets into by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.\n\n\n::: {.cell}\n\n:::\n\n\nIn this section, we will split the data into training data - Jan 2023 to June 2024 & test Data - July 2024 to Sept 2024 that is stratified by Punggol & Woodlands. We can see there are 1549 training records and 300 testing records for Punggol whereas in Woodlands there are 1391 training records and 238 testing records.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ntrain_data_punggol <- data %>%\n  filter(month >= as.POSIXct(\"2023-01-01\") & \n         month <= as.POSIXct(\"2024-06-30\") &\n         town == \"PUNGGOL\") %>% \n  select(-c(month))\n\ntest_data_punggol <- data %>%\n  filter(month >= as.POSIXct(\"2024-07-01\") & \n         month <= as.POSIXct(\"2024-09-30\") &\n         town == \"PUNGGOL\") %>% \n  select(-c(month))\n\n# Optional: to check the filtered data\nprint(paste(\"Number of training records:\", nrow(train_data_punggol)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of training records: 1549\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Number of testing records:\", nrow(test_data_punggol)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of testing records: 300\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data_punggol, \"data/rds/ml/punggol/train_data_punggol.rds\")\nwrite_rds(test_data_punggol, \"data/rds/ml/punggol/test_data_punggol.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ntrain_data_woodlands <- data %>%\n  filter(month >= as.POSIXct(\"2023-01-01\") & \n         month <= as.POSIXct(\"2024-06-30\") &\n         town == \"WOODLANDS\") %>% \n  select(-c(month))\n\ntest_data_woodlands <- data %>%\n  filter(month >= as.POSIXct(\"2024-07-01\") & \n         month <= as.POSIXct(\"2024-09-30\") &\n         town == \"WOODLANDS\") %>% \n  select(-c(month))\n\n# Optional: to check the filtered data\nprint(paste(\"Number of training records:\", nrow(train_data_woodlands)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of training records: 1391\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Number of testing records:\", nrow(test_data_woodlands)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of testing records: 238\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data_woodlands, \"data/rds/ml/woodlands/train_data_woodlands.rds\")\nwrite_rds(test_data_woodlands, \"data/rds/ml/woodlands/test_data_woodlands.rds\")\n```\n:::\n\n:::\n\n### Computing Correlation Matrix\n\nPrior to loading predictors into predictive model, a correlation matrix will be use to check for sign of multicollinearity. From the correlation matrix below, all correlation values are below 0.8, indicating no sign of multicollinearity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_nogeo <- data %>%\n   select(-c(month)) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot::corrplot(cor(data_nogeo[, 2:19]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-143-1.png){width=672}\n:::\n:::\n\n\n### Retrieving Stored Data\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_punggol <- read_rds(\"data/rds/ml/punggol/train_data_punggol.rds\")\ntest_data_punggol <- read_rds(\"data/rds/ml/punggol/test_data_punggol.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_woodlands <- read_rds(\"data/rds/ml/woodlands/train_data_woodlands.rds\")\ntest_data_woodlands <- read_rds(\"data/rds/ml/woodlands/test_data_woodlands.rds\")\n```\n:::\n\n:::\n\n## Building a non-spatial multiple linear regression\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the linear model for resale_price using the specified variables\nprice_mlr_p <- lm(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n               data = train_data_punggol)\n\n# Summary of the linear model\nsummary(price_mlr_p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + unit_age + within_350m_busstop + \n    within_350m_eldercare + hawker_prox + within_350m_kindergarten + \n    mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox, \n    data = train_data_punggol)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-136613  -26146     -96   26415  140294 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              -2425118.0   181420.5 -13.367  < 2e-16 ***\nfloor_area_sqm              11207.8      669.0  16.754  < 2e-16 ***\nunit_age                    -3655.1      390.9  -9.351  < 2e-16 ***\nwithin_350m_busstop          -601.6      515.7  -1.167 0.243557    \nwithin_350m_eldercare       18135.0     2457.4   7.380 2.59e-13 ***\nhawker_prox                -73597.2     5073.0 -14.508  < 2e-16 ***\nwithin_350m_kindergarten     -788.8     2040.8  -0.387 0.699178    \nmall_prox                   37612.1     3120.5  12.053  < 2e-16 ***\nmrt_prox                   -81583.3    11403.9  -7.154 1.30e-12 ***\npark_prox                   64924.6     7539.8   8.611  < 2e-16 ***\nwithin_1km_school           -5807.9     1023.9  -5.673 1.68e-08 ***\nsupermarket_prox            41305.5    11410.9   3.620 0.000304 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 39990 on 1537 degrees of freedom\nMultiple R-squared:  0.5345,\tAdjusted R-squared:  0.5311 \nF-statistic: 160.4 on 11 and 1537 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(price_mlr_p, \"data/rds/ml/punggol/price_mlr_p.rds\" ) \n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the linear model for resale_price using the specified variables\nprice_mlr_w <- lm(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n               data = train_data_woodlands)\n\n# Summary of the linear model\nsummary(price_mlr_w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + unit_age + within_350m_busstop + \n    within_350m_eldercare + hawker_prox + within_350m_kindergarten + \n    mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox, \n    data = train_data_woodlands)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-108605  -18479    -861   17651  118328 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              475932.61   72526.66   6.562 7.48e-11 ***\nfloor_area_sqm             2320.91     142.03  16.341  < 2e-16 ***\nunit_age                  -4309.72      84.93 -50.742  < 2e-16 ***\nwithin_350m_busstop         386.65     394.41   0.980   0.3271    \nwithin_350m_eldercare      1333.49    1282.39   1.040   0.2986    \nhawker_prox              -16533.03    3163.02  -5.227 1.99e-07 ***\nwithin_350m_kindergarten   2531.64    1171.15   2.162   0.0308 *  \nmall_prox                 -1004.92    1442.73  -0.697   0.4862    \nmrt_prox                 -44163.93    4902.52  -9.008  < 2e-16 ***\npark_prox                -15524.87    2149.37  -7.223 8.38e-13 ***\nwithin_1km_school           693.69     670.29   1.035   0.3009    \nsupermarket_prox             23.45    5293.65   0.004   0.9965    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 28570 on 1379 degrees of freedom\nMultiple R-squared:  0.748,\tAdjusted R-squared:  0.746 \nF-statistic: 372.1 on 11 and 1379 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(price_mlr_w, \"data/rds/ml/woodlands/price_mlr_w.rds\" ) \n```\n:::\n\n:::\n\n## Geographically Weighted Regression\n\nNow, we will calibrate a model to predict HDB resale price by using geographically weighted regression method of [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/index.html) package.\n\n### Converting the sf data.frame to SpatialPointDataFrame\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp_p <- as_Spatial(train_data_punggol)\ntrain_data_sp_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1549 \nextent      : 34320.85, 37615.35, 41556.12, 43933.95  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 20\nnames       :    town, resale_price, floor_area_sqm, remaining_lease_yr,        longitude,         latitude, unit_age,       busstop_prox, within_350m_busstop,       eldercare_prox, within_350m_eldercare,      hawker_prox,    kindergarten_prox, within_350m_kindergarten,        mall_prox, ... \nmin values  : PUNGGOL,       456000,             85,                 78, 34320.8500594051, 41556.1217510505,        4, 0.0232098182955299,                   2, 9.08133417710502e-07,                     0, 0.23549332350391, 3.08593427233971e-07,                        0, 54.6825044697734, ... \nmax values  : PUNGGOL,        8e+05,             99,                 95, 37615.3527353946, 43933.9470685477,       21,  0.320676170721283,                  14,     1.69953951976499,                     2, 1.98905282800319,    0.804615824046136,                        3, 56.7005204705412, ... \n```\n\n\n:::\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp_w <- as_Spatial(train_data_woodlands)\ntrain_data_sp_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1391 \nextent      : 21177.26, 25268.25, 45373.58, 47860.89  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 20\nnames       :      town, resale_price, floor_area_sqm, remaining_lease_yr,        longitude,         latitude, unit_age,       busstop_prox, within_350m_busstop,     eldercare_prox, within_350m_eldercare,        hawker_prox,    kindergarten_prox, within_350m_kindergarten,        mall_prox, ... \nmin values  : WOODLANDS,       350000,             83,                 49, 21177.2576852251, 45373.5757321722,        4, 0.0199595426953728,                   4, 0.0547017433825683,                     0, 0.0666360841718605, 6.84731226937912e-07,                        0, 50.0713376927117, ... \nmax values  : WOODLANDS,       690000,            119,                 95, 25268.2547251521, 47860.8875505569,       50,  0.253082170943171,                  16,   1.73109192014879,                     3,   1.56805500852822,    0.760166885640459,                        4, 53.6923986369607, ... \n```\n\n\n:::\n:::\n\n:::\n\n### Computing adaptive bandwidth\n\nNext, `bw.gwr()` of **GWmodel** package will be used to determine the optimal bandwidth to be used.\n\n::::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive_p <- bw.gwr(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=train_data_sp_p,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nAdaptive bandwidth: 964 CV score: 2.37468e+12 \nAdaptive bandwidth: 604 CV score: 2.273545e+12 \nAdaptive bandwidth: 379 CV score: 2.179535e+12 \nAdaptive bandwidth: 243 CV score: 2.073315e+12 \nAdaptive bandwidth: 155 CV score: 2.011629e+12 \nAdaptive bandwidth: 105 CV score: 1.983025e+12 \nAdaptive bandwidth: 69 CV score: 1.946889e+12 \nAdaptive bandwidth: 52 CV score: 1.916621e+12 \nAdaptive bandwidth: 36 CV score: 1.894903e+12 \nAdaptive bandwidth: 31 CV score: 1.888189e+12 \nAdaptive bandwidth: 23 CV score: 1.901021e+12 \nAdaptive bandwidth: 31 CV score: 1.888189e+12 \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n\nThe result shows that 31 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n\n::: callout-note\nInsights\n\nThe result shows that 86 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive_p, \"data/rds/ml/punggol/bw_adaptive_p.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive_w <- bw.gwr(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=train_data_sp_w,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 867 CV score: 1.120907e+12 \nAdaptive bandwidth: 544 CV score: 1.112173e+12 \nAdaptive bandwidth: 343 CV score: 1.101484e+12 \nAdaptive bandwidth: 220 CV score: 1.079251e+12 \nAdaptive bandwidth: 142 CV score: 1.057357e+12 \nAdaptive bandwidth: 96 CV score: 1.047183e+12 \nAdaptive bandwidth: 65 CV score: 1.027565e+12 \nAdaptive bandwidth: 48 CV score: 1.015162e+12 \nAdaptive bandwidth: 35 CV score: 1.307044e+12 \nAdaptive bandwidth: 53 CV score: 1.017467e+12 \nAdaptive bandwidth: 41 CV score: 1.303681e+12 \nAdaptive bandwidth: 48 CV score: 1.015162e+12 \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n\n::: callout-note\nInsights\n\nThe results shows that 48 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive_w, \"data/rds/ml/woodlands/bw_adaptive_w.rds\")\n```\n:::\n\n:::::\n\n### Constructing the adaptive bandwidth gwr model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive_p <- read_rds(\"data/rds/ml/punggol/bw_adaptive_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive_w <- read_rds(\"data/rds/ml/woodlands/bw_adaptive_w.rds\")\n```\n:::\n\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_p <- gwr.basic(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=train_data_sp_p,\n                          bw=bw_adaptive_p, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive_p, \"data/rds/ml/punggol/gwr_adaptive_p.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_w <- gwr.basic(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=train_data_sp_w,\n                          bw=bw_adaptive_w, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive_w, \"data/rds/ml/woodlands/gwr_adaptive_w.rds\")\n```\n:::\n\n:::\n\n### Retrieve gwr output object\n\nThe code below can be used to display the model output.\n\n::::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_p <- read_rds(\"data/rds/ml/punggol/gwr_adaptive_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-10 17:29:46.439727 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + unit_age + \n    within_350m_busstop + within_350m_eldercare + hawker_prox + \n    within_350m_kindergarten + mall_prox + mrt_prox + park_prox + \n    within_1km_school + supermarket_prox, data = train_data_sp_p, \n    bw = bw_adaptive_p, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm unit_age within_350m_busstop within_350m_eldercare hawker_prox within_350m_kindergarten mall_prox mrt_prox park_prox within_1km_school supermarket_prox\n   Number of data points: 1549\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-136613  -26146     -96   26415  140294 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              -2425118.0   181420.5 -13.367  < 2e-16 ***\n   floor_area_sqm              11207.8      669.0  16.754  < 2e-16 ***\n   unit_age                    -3655.1      390.9  -9.351  < 2e-16 ***\n   within_350m_busstop          -601.6      515.7  -1.167 0.243557    \n   within_350m_eldercare       18135.0     2457.4   7.380 2.59e-13 ***\n   hawker_prox                -73597.2     5073.0 -14.508  < 2e-16 ***\n   within_350m_kindergarten     -788.8     2040.8  -0.387 0.699178    \n   mall_prox                   37612.1     3120.5  12.053  < 2e-16 ***\n   mrt_prox                   -81583.3    11403.9  -7.154 1.30e-12 ***\n   park_prox                   64924.6     7539.8   8.611  < 2e-16 ***\n   within_1km_school           -5807.9     1023.9  -5.673 1.68e-08 ***\n   supermarket_prox            41305.5    11410.9   3.620 0.000304 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 39990 on 1537 degrees of freedom\n   Multiple R-squared: 0.5345\n   Adjusted R-squared: 0.5311 \n   F-statistic: 160.4 on 11 and 1537 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 2.457709e+12\n   Sigma(hat): 39858.42\n   AIC:  37237.26\n   AICc:  37237.5\n   BIC:  35853.24\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 31 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.6026e+08 -1.8903e+07 -5.2468e+06  3.2394e+06\n   floor_area_sqm           -9.3131e+05  4.9672e+03  9.1804e+03  1.6247e+04\n   unit_age                 -7.2954e+03 -2.3589e+03  9.9553e+03  1.8568e+04\n   within_350m_busstop      -2.1840e+04 -3.5978e+03  7.9328e+02  3.5622e+03\n   within_350m_eldercare    -5.0557e+05 -2.9912e+03  1.7167e+04  5.6494e+04\n   hawker_prox              -1.0870e+07 -3.7718e+05 -8.1130e+04  1.2870e+05\n   within_350m_kindergarten -8.6012e+05 -2.8299e+04 -7.3968e+03  1.1648e+04\n   mall_prox                -6.1324e+06 -5.6280e+04  8.8829e+04  3.3087e+05\n   mrt_prox                 -1.5787e+06 -1.4296e+05 -9.5298e+03  2.0465e+05\n   park_prox                -8.1186e+06 -1.7270e+05  1.5589e+04  3.1357e+05\n   within_1km_school        -1.1002e+05 -7.9972e+03  4.7641e+02  8.1719e+03\n   supermarket_prox         -3.4463e+06 -1.1782e+05 -4.4088e+04  5.4404e+04\n                                 Max.\n   Intercept                344376485\n   floor_area_sqm              163021\n   unit_age                     45035\n   within_350m_busstop          20457\n   within_350m_eldercare      3933539\n   hawker_prox                1825411\n   within_350m_kindergarten    323139\n   mall_prox                  6261469\n   mrt_prox                   8775702\n   park_prox                  6609422\n   within_1km_school           119709\n   supermarket_prox          11102587\n   ************************Diagnostic information*************************\n   Number of data points: 1549 \n   Effective number of parameters (2trace(S) - trace(S'S)): 216.9356 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1332.064 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 36831.82 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 36605.4 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 36183.21 \n   Residual sum of squares: 1.482095e+12 \n   R-square value:  0.7192638 \n   Adjusted R-square value:  0.6735097 \n\n   ***********************************************************************\n   Program stops at: 2024-11-10 17:29:47.909276 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Insights of 2 Regression Analysis in predicting resale price - Punggol**\n\n1.  Global Regression\n\n    -   **Residuals**: The residuals indicate the difference between the observed and predicted resale prices. The residuals range from -144,029 to 135,047, with a median of -1,271, suggesting that the model may not perfectly fit all data points, particularly those with extreme values.\n\n    -   **Coefficients**: The estimated coefficients for each predictor variable indicate their respective impact on resale price.\n\n        -   **Significant Variables**: Variables like `floor_area_sqm`, `unit_age`, and `hawker_prox` are statistically significant with p-values less than 0.001, suggesting strong relationships with the resale price.\n\n        -   **Non-significant Variables**: `within_350m_busstop` did not show significant effects on resale price, with p-values greater than 0.05.\n\n    -   **Model Fit**: The global regression model explains about **51.57%** of the variance in resale price (R-squared = 0.5157). The **Adjusted R-squared** is 0.5123, showing a modest fit after adjusting for the number of predictors. The **F-statistic** of 148.8, with a p-value less than 2.2e-16, indicates that the overall model is highly significant.\n\n    -   **AIC/BIC**: The Akaike Information Criterion (AIC = 37,298.31) and the Bayesian Information Criterion (BIC = 35,914.29) suggest that the global model provides a reasonable fit, although these values are used for model comparison rather than absolute goodness-of-fit assessment.\n\n2.  Geographically Weighted Regression\n\nThis model was calibrated using the **adaptive Gaussian kernel** with an **adaptive bandwidth** of 31, meaning the model uses data from the 31 nearest neighbors to each observation.\n\n-   **Model Calibration**: The GWR model was fitted using the same set of predictor variables as the global regression model. The use of an adaptive kernel and Euclidean distance metric enables the model to account for spatial heterogeneity in the relationships between predictors and resale price.\n\n-   **Coefficient Estimates**:\n\n    -   The GWR model shows **significant variation** in the coefficient estimates across geographic locations. For instance:\n\n        -   The coefficient for `floor_area_sqm` ranges from negative to positive values, indicating that the impact of floor area on resale price varies spatially.\n\n        -   The coefficient for `unit_age` shows a similar spatial variation, with the impact differing from location to location.\n\n        -   `hawker_prox` and `supermarket_prox` also exhibit varying effects on resale price across locations.\n\n-   **Model Fit**:\n\n    **R-squared**: The GWR model explains approximately **71.98%** of the variance in resale price (R-squared = 0.7198), which is a substantial improvement over the global regression model. The **Adjusted R-squared** is 0.6743, indicating that the model explains a significant portion of the variance while accounting for the number of predictors.\n\n    **AIC/BIC**: The GWR model shows lower AIC (36,602.13) and BIC (36,179.57) values than the global regression model, suggesting that the GWR model provides a better fit to the data when accounting for spatial variability.\n\n**Overall**\n\nSpatially varying coefficients highlight that the impact of certain factors, such as `floor_area_sqm`, `unit_age`, and proximity to amenities like `hawker centers` and `supermarkets`, can differ significantly across different locations, suggesting that location-specific interventions or policies might be more effective in real estate pricing.\n:::\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_w <- read_rds(\"data/rds/ml/woodlands/gwr_adaptive_w.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-10 17:29:48.018416 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + unit_age + \n    within_350m_busstop + within_350m_eldercare + hawker_prox + \n    within_350m_kindergarten + mall_prox + mrt_prox + park_prox + \n    within_1km_school + supermarket_prox, data = train_data_sp_w, \n    bw = bw_adaptive_w, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm unit_age within_350m_busstop within_350m_eldercare hawker_prox within_350m_kindergarten mall_prox mrt_prox park_prox within_1km_school supermarket_prox\n   Number of data points: 1391\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-108605  -18479    -861   17651  118328 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              475932.61   72526.66   6.562 7.48e-11 ***\n   floor_area_sqm             2320.91     142.03  16.341  < 2e-16 ***\n   unit_age                  -4309.72      84.93 -50.742  < 2e-16 ***\n   within_350m_busstop         386.65     394.41   0.980   0.3271    \n   within_350m_eldercare      1333.49    1282.39   1.040   0.2986    \n   hawker_prox              -16533.03    3163.02  -5.227 1.99e-07 ***\n   within_350m_kindergarten   2531.64    1171.15   2.162   0.0308 *  \n   mall_prox                 -1004.92    1442.73  -0.697   0.4862    \n   mrt_prox                 -44163.93    4902.52  -9.008  < 2e-16 ***\n   park_prox                -15524.87    2149.37  -7.223 8.38e-13 ***\n   within_1km_school           693.69     670.29   1.035   0.3009    \n   supermarket_prox             23.45    5293.65   0.004   0.9965    \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 28570 on 1379 degrees of freedom\n   Multiple R-squared: 0.748\n   Adjusted R-squared: 0.746 \n   F-statistic: 372.1 on 11 and 1379 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.125708e+12\n   Sigma(hat): 28468.32\n   AIC:  32505.2\n   AICc:  32505.46\n   BIC:  31276.38\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 48 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -1.1312e+09 -1.5632e+06  3.9476e+05  1.9149e+06\n   floor_area_sqm           -1.5228e+04  9.8373e+02  2.1764e+03  2.7568e+03\n   unit_age                 -5.2038e+03 -4.5082e+03 -3.9677e+03 -2.2334e+03\n   within_350m_busstop      -5.5262e+03 -1.7354e+03 -5.3815e+02  1.2150e+03\n   within_350m_eldercare    -4.4071e+05 -1.9180e+04 -5.4921e+03  3.5630e+02\n   hawker_prox              -3.5823e+05 -3.8041e+04 -6.8955e+03  4.1019e+04\n   within_350m_kindergarten -3.9285e+04 -4.2950e+03  6.3734e+02  6.3378e+03\n   mall_prox                -2.4362e+05 -2.6020e+04  1.5904e+03  4.0938e+04\n   mrt_prox                 -6.7648e+05 -6.8419e+04 -1.5806e+04  2.0814e+04\n   park_prox                -3.5428e+05 -6.1010e+04 -2.2539e+04  2.6743e+03\n   within_1km_school        -5.6562e+05 -9.8708e+03 -5.0483e+03 -2.4167e+03\n   supermarket_prox         -5.4534e+05 -6.9462e+04 -3.9335e+04 -2.4152e+03\n                                  Max.\n   Intercept                13797986.0\n   floor_area_sqm              18382.0\n   unit_age                    13828.7\n   within_350m_busstop          4947.6\n   within_350m_eldercare     1085786.9\n   hawker_prox              22332689.8\n   within_350m_kindergarten   129965.6\n   mall_prox                21420842.0\n   mrt_prox                  3950844.9\n   park_prox                  787950.9\n   within_1km_school            7588.5\n   supermarket_prox            94873.0\n   ************************Diagnostic information*************************\n   Number of data points: 1391 \n   Effective number of parameters (2trace(S) - trace(S'S)): 131.5628 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1259.437 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 32347.02 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 32221.73 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 31488.57 \n   Residual sum of squares: 867184876654 \n   R-square value:  0.8058492 \n   Adjusted R-square value:  0.7855518 \n\n   ***********************************************************************\n   Program stops at: 2024-11-10 17:29:49.146893 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Insights of 2 Regression Analysis in predicting resale price - Woodlands**\n\n1.  Global Regression\n\n-   **Residuals**: The residuals range from -110,060 to 118,690, with a median of -926. This shows that the model can produce both underestimations and overestimations of resale price, with some extreme residuals indicating potential outliers.\n\n-   **Coefficients**:\n\n    -   **Intercept**: The base resale price when all predictors are zero is estimated at **435,172.15**.\n\n    -   **Significant Variables**:\n\n        -   **`floor_area_sqm`**: Each additional square meter increases the resale price by **2,247.33**.\n\n        -   **`unit_age`**: Each additional year of unit age decreases the resale price by **4,322.06**.\n\n        -   **`hawker_prox`**: Proximity to hawker centers decreases resale price by **-14,811.35**.\n\n        -   **`mrt_prox`**: Proximity to MRT stations has a significant negative effect of **-45,257.65** on resale price.\n\n        -   **`park_prox`**: Proximity to parks also significantly decreases resale price by **-15,817.05**.\n\n        -   **`within_350m_kindergarten`**: The presence of a kindergarten within 350 meters increases resale price by **3,083.36**.\n\n-   **Model Fit**:\n\n    -   **R-squared**: The model explains about **74.83%** of the variance in resale price, indicating a strong overall fit.\n\n    -   **Adjusted R-squared**: **74.63%**, which adjusts for the number of predictors.\n\n    -   **F-statistic**: The F-statistic is **372.7**, with a p-value of less than 2.2e-16, indicating that the model is highly significant.\n\n-   **AIC/BIC**:\n\n    -   **AIC**: 32,503.3, and **BIC**: 31,274.49, which provide a basis for model comparison and indicate that the global model fits the data reasonably well.\n\n2.  Geographical Weighted Regression\n\n-   **Model Calibration**:\n\n    -   **Adaptive Bandwidth**: 48 neighbors were used in the adaptive bandwidth, ensuring that the local influence of each observation is based on the proximity of other observations.\n\n    -   **Kernel Function**: A Gaussian kernel was used, which gives more weight to observations closer to each location.\n\n-   **Coefficient Estimates**: The coefficients for the predictors vary significantly across geographic locations:\n\n    -   **`floor_area_sqm`**: The effect of floor area on resale price ranges from negative to positive values. In some areas, additional floor space leads to a large increase in resale price, while in others, the impact is smaller.\n\n    -   **`unit_age`**: The effect of unit age varies spatially, with some areas showing a significant negative impact on resale price, while in others, the impact is less pronounced.\n\n    -   **`hawker_prox`**: The proximity to hawker centers shows a negative relationship with resale price in some regions, with a large range in coefficient estimates, suggesting that the effect of hawker centers on property prices varies significantly by location.\n\n    -   **`mrt_prox`**: Proximity to MRT stations shows a negative effect in certain locations, with varying strength across different regions in Woodlands.\n\n    -   **`park_prox`**: Proximity to parks also varies across locations, with some areas showing a stronger negative impact on resale price than others.\n\n-   **Model Fit**:\n\n    -   **R-squared**: The GWR model explains **80.58%** of the variance in resale price, which represents a significant improvement over the global model (74.83%). This indicates that incorporating spatial variability greatly enhances model accuracy.\n\n    -   **Adjusted R-squared**: **78.52%**, further indicating that the GWR model accounts for a significant amount of variance while adjusting for the number of predictors.\n\n-   **AIC/BIC**:\n\n    -   **AIC**: 32,223.42 and **BIC**: 31,497.62, which are lower than the values for the global model, indicating that the GWR model provides a better fit for the data when accounting for spatial differences.\n\n-   **Residual Sum of Squares (RSS)**: The GWR model has a residual sum of squares of **8.67507e+11**, suggesting that the model has reduced unexplained variance compared to the global model.\n\n**Overall**\n\nThe GWR model provides a much better fit for the resale price data in Woodlands compared to the global regression model. The improvement in **R-squared** (from 74.83% to 80.58%) suggests that there are significant spatial differences in the factors affecting resale prices.\n\n-   **Floor Area**: The positive relationship between floor area and resale price varies significantly across Woodlands. In some areas, floor area is a strong predictor of resale price, while in others, it has a smaller effect.\n\n-   **Unit Age**: The negative effect of unit age on resale price is more pronounced in some parts of Woodlands, indicating that older units in certain locations have a larger impact on resale price.\n\n-   **Proximity to Amenities**: Variables such as proximity to MRT stations, parks, and hawker centers show varying effects across locations. For example, properties near MRT stations tend to have lower resale prices in some regions, while in others, the proximity to parks and kindergartens can increase prices.\n:::\n:::::\n\n### Converting the test data from sf data.frame to SpatialPointDataFrame\n\n::: panel-tabset\nPunggol\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp_p <- as_Spatial(test_data_punggol)\ntest_data_sp_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 300 \nextent      : 34320.85, 37549.49, 41631.21, 43933.95  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 20\nnames       :    town, resale_price, floor_area_sqm, remaining_lease_yr,        longitude,         latitude, unit_age,       busstop_prox, within_350m_busstop,       eldercare_prox, within_350m_eldercare,      hawker_prox,   kindergarten_prox, within_350m_kindergarten,        mall_prox, ... \nmin values  : PUNGGOL,       495000,             85,                 77, 34320.8500594051, 41631.2121389891,        5, 0.0287942812318591,                   2, 9.08133417710502e-07,                     0, 0.28631929470226, 5.4646933332265e-07,                        0, 54.6825044697734, ... \nmax values  : PUNGGOL,       788000,             99,                 94, 37549.4930230187, 43933.9470685477,       22,  0.286960879696002,                  14,     1.69953951976499,                     2, 1.94955185447985,   0.764704244775304,                        3, 56.6972972869625, ... \n```\n\n\n:::\n:::\n\n\nWoodlands\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp_w <- as_Spatial(test_data_woodlands)\ntest_data_sp_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 238 \nextent      : 21177.26, 25186.96, 45373.58, 47860.89  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 20\nnames       :      town, resale_price, floor_area_sqm, remaining_lease_yr,        longitude,         latitude, unit_age,       busstop_prox, within_350m_busstop,     eldercare_prox, within_350m_eldercare,        hawker_prox,  kindergarten_prox, within_350m_kindergarten,        mall_prox, ... \nmin values  : WOODLANDS,       355000,             83,                 48, 21177.2576852251, 45373.5757321722,        5, 0.0205869708371814,                   4, 0.0656405943898966,                     0, 0.0666360841718605, 8.502567959163e-07,                        0, 50.0713376927117, ... \nmax values  : WOODLANDS,       701000,            111,                 94, 25186.9617010174, 47860.8875505569,       51,  0.253082170943171,                  16,   1.65460210369017,                     3,    1.5143514513644,  0.798763870107565,                        4, 53.6923986369607, ... \n```\n\n\n:::\n:::\n\n:::\n\n### Computing adaptive bandwidth for the test data\n\n::: panel-tabset\nPunggol\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive_p <- bw.gwr(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=test_data_sp_p,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 193 CV score: 461863083474 \nAdaptive bandwidth: 127 CV score: 444482582747 \nAdaptive bandwidth: 86 CV score: 429860319803 \nAdaptive bandwidth: 60 CV score: 4.15545e+11 \nAdaptive bandwidth: 45 CV score: 405403507470 \nAdaptive bandwidth: 34 CV score: 406000083766 \nAdaptive bandwidth: 50 CV score: 408265912967 \nAdaptive bandwidth: 40 CV score: 406022699918 \nAdaptive bandwidth: 46 CV score: 405735445126 \nAdaptive bandwidth: 42 CV score: 406270763040 \nAdaptive bandwidth: 44 CV score: 405653093262 \nAdaptive bandwidth: 42 CV score: 406270763040 \nAdaptive bandwidth: 43 CV score: 4.05838e+11 \nAdaptive bandwidth: 42 CV score: 406270763040 \nAdaptive bandwidth: 42 CV score: 406270763040 \nAdaptive bandwidth: 41 CV score: 405877056522 \nAdaptive bandwidth: 41 CV score: 405877056522 \nAdaptive bandwidth: 40 CV score: 406022699918 \nAdaptive bandwidth: 40 CV score: 406022699918 \nAdaptive bandwidth: 39 CV score: 406410298495 \nAdaptive bandwidth: 39 CV score: 406410298495 \nAdaptive bandwidth: 38 CV score: 406480426659 \nAdaptive bandwidth: 38 CV score: 406480426659 \nAdaptive bandwidth: 37 CV score: 405643842893 \nAdaptive bandwidth: 37 CV score: 405643842893 \nAdaptive bandwidth: 36 CV score: 405801331672 \nAdaptive bandwidth: 36 CV score: 405801331672 \nAdaptive bandwidth: 35 CV score: 405721054702 \nAdaptive bandwidth: 35 CV score: 405721054702 \nAdaptive bandwidth: 34 CV score: 406000083766 \nAdaptive bandwidth: 34 CV score: 406000083766 \nAdaptive bandwidth: 33 CV score: 405311774904 \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_bw_test_adaptive_p, \"data/rds/ml/punggol/gwr_bw_test_adaptive_p.rds\")\n```\n:::\n\n\nWoodlands\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive_w<- bw.gwr(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                  data=test_data_sp_w,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 154 CV score: 141474677352 \nAdaptive bandwidth: 103 CV score: 140090697462 \nAdaptive bandwidth: 70 CV score: 138907367486 \nAdaptive bandwidth: 51 CV score: 137432823055 \nAdaptive bandwidth: 38 CV score: 135519123552 \nAdaptive bandwidth: 31 CV score: 134512516189 \nAdaptive bandwidth: 25 CV score: 134598796510 \nAdaptive bandwidth: 33 CV score: 1.34745e+11 \nAdaptive bandwidth: 28 CV score: 135016725804 \nAdaptive bandwidth: 31 CV score: 134512516189 \n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_bw_test_adaptive_w, \"data/rds/ml/woodlands/gwr_bw_test_adaptive_w.rds\")\n```\n:::\n\n:::\n\n### Computing predicted values of the test data\n\n::::: panel-tabset\nPunggol\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_p <- gwr.predict(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox, \n                        data=train_data_sp_p, \n                        predictdata = test_data_sp_p, \n                        bw=100, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-10 17:29:50.483679 \n   Call:\n   gwr.predict(formula = resale_price ~ floor_area_sqm + unit_age + \n    within_350m_busstop + within_350m_eldercare + hawker_prox + \n    within_350m_kindergarten + mall_prox + mrt_prox + park_prox + \n    within_1km_school + supermarket_prox, data = train_data_sp_p, \n    predictdata = test_data_sp_p, bw = 100, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  floor_area_sqm unit_age within_350m_busstop within_350m_eldercare hawker_prox within_350m_kindergarten mall_prox mrt_prox park_prox within_1km_school supermarket_prox\n   Number of data points: 1549\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 100 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                        Min.     1st Qu.      Median\n   Intercept_coef                -1.1137e+07 -4.0950e+06 -1.8008e+06\n   floor_area_sqm_coef            6.5380e+02  7.4184e+03  9.3916e+03\n   unit_age_coef                 -7.4305e+03 -3.9280e+03 -1.7500e+03\n   within_350m_busstop_coef      -5.3279e+03 -2.1329e+03 -5.4695e+02\n   within_350m_eldercare_coef    -3.0346e+04  2.0333e+03  1.8049e+04\n   hawker_prox_coef              -4.4176e+05 -2.1443e+05 -7.7957e+04\n   within_350m_kindergarten_coef -2.4241e+04 -1.6656e+04 -8.7511e+03\n   mall_prox_coef                -1.9105e+05  9.2298e+03  2.5243e+04\n   mrt_prox_coef                 -1.5919e+05 -8.3799e+04 -5.2551e+04\n   park_prox_coef                -9.6160e+04  1.4933e+04  5.4488e+04\n   within_1km_school_coef        -1.1990e+04 -6.1249e+03 -3.9312e+03\n   supermarket_prox_coef         -1.2277e+05 -5.0793e+04 -2.8030e+04\n                                     3rd Qu.       Max.\n   Intercept_coef                -5.5879e+05 10743979.3\n   floor_area_sqm_coef            1.2740e+04    19011.5\n   unit_age_coef                  4.2753e+03    18101.9\n   within_350m_busstop_coef       1.1316e+03     3852.9\n   within_350m_eldercare_coef     2.8801e+04    65407.6\n   hawker_prox_coef              -1.8368e+04   113086.4\n   within_350m_kindergarten_coef -3.7455e+02    15082.2\n   mall_prox_coef                 6.2916e+04   200516.3\n   mrt_prox_coef                 -1.7414e+04   165209.6\n   park_prox_coef                 1.3493e+05   365020.5\n   within_1km_school_coef        -1.1988e+03     7789.1\n   supermarket_prox_coef          3.2259e+04   117388.1\n\n   ****************       Results of GW prediction       ******************\n                        Min.    1st Qu.     Median    3rd Qu.       Max.\n   prediction         459054     588680     609707     646438     708324\n   prediction_var 1249829990 1264888497 1274282131 1284856043 1412261610\n\n   ***********************************************************************\n   Program stops at: 2024-11-10 17:30:38.586327 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_pred_p, \"data/rds/ml/punggol/gwr_pred_p.rds\")\n```\n:::\n\n\n::: callout-note\n**GWR Coefficient Estimates**\n\n**Interpretation**:\n\n-   The **Intercept** varies greatly across locations, ranging from a negative coefficient (-1,441,251.41) to a positive coefficient (786,268.8), indicating that baseline resale prices are influenced differently across locations.\n\n-   **floor_area_sqm**: The effect of floor area on resale price ranges from negative to positive. In some locations, a larger floor area has a smaller impact, while in others it has a much larger effect.\n\n-   **unit_age**: The negative relationship between unit age and resale price is more pronounced in some areas, suggesting that older units may have a larger negative impact on property values in certain locations.\n\n-   **Proximity to amenities**: Variables such as **hawker_prox**, **mrt_prox**, **park_prox**, and **supermarket_prox** show a wide range of coefficients. For example, proximity to hawker centers has a strong negative impact in some regions, while proximity to parks and supermarkets has a positive impact in others.\n\n**Prediction Results**\n\n**Interpretation**:\n\n-   The predicted resale prices range from **\\$463,945** to **\\$707,938**, with a median prediction of **\\$609,348**. These values are within a reasonable range given the data and suggest a good predictive performance.\n\n-   The **prediction variance** shows a substantial range, from about **1.25 billion** to **1.4 billion**, indicating that the predicted resale prices vary considerably. This is expected, as some locations may have more variability in resale price due to factors such as proximity to amenities and the overall market conditions.\n\n**Overall**\n\nKey findings include:\n\n-   The **effect of floor area**, **unit age**, and **proximity to amenities** varies significantly across different locations in Woodlands.\n\n-   The **prediction results** show a reasonable range of predicted resale prices, with substantial variance indicating the sensitivity of prices to local factors.\n:::\n\nWoodlands\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_w <- gwr.predict(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox, \n                        data=train_data_sp_w, \n                        predictdata = test_data_sp_w, \n                        bw=100, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-10 17:30:38.631259 \n   Call:\n   gwr.predict(formula = resale_price ~ floor_area_sqm + unit_age + \n    within_350m_busstop + within_350m_eldercare + hawker_prox + \n    within_350m_kindergarten + mall_prox + mrt_prox + park_prox + \n    within_1km_school + supermarket_prox, data = train_data_sp_w, \n    predictdata = test_data_sp_w, bw = 100, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  floor_area_sqm unit_age within_350m_busstop within_350m_eldercare hawker_prox within_350m_kindergarten mall_prox mrt_prox park_prox within_1km_school supermarket_prox\n   Number of data points: 1391\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 100 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                        Min.     1st Qu.      Median\n   Intercept_coef                -2.1902e+06 -9.3788e+04  6.7361e+05\n   floor_area_sqm_coef           -3.3112e+03  1.8210e+03  2.2761e+03\n   unit_age_coef                 -4.9718e+03 -4.5761e+03 -4.3469e+03\n   within_350m_busstop_coef      -2.2179e+03 -6.0128e+02 -9.4503e+01\n   within_350m_eldercare_coef    -4.5128e+04 -9.5403e+03 -5.8673e+03\n   hawker_prox_coef              -2.2862e+05 -2.6585e+04 -1.4338e+04\n   within_350m_kindergarten_coef -9.6328e+03 -2.6297e+03 -4.1932e+01\n   mall_prox_coef                -4.8135e+04 -1.0964e+04 -3.7845e+03\n   mrt_prox_coef                 -1.7215e+05 -4.2204e+04 -2.1621e+04\n   park_prox_coef                -1.3435e+05 -4.0264e+04 -2.7108e+04\n   within_1km_school_coef        -9.4865e+03 -5.4721e+03 -3.3587e+03\n   supermarket_prox_coef         -9.7199e+04 -4.7539e+04 -3.3118e+04\n                                     3rd Qu.      Max.\n   Intercept_coef                 1.1117e+06 2976576.6\n   floor_area_sqm_coef            2.5522e+03    3019.2\n   unit_age_coef                 -3.7747e+03   -1769.4\n   within_350m_busstop_coef       7.3075e+02    3301.4\n   within_350m_eldercare_coef    -1.4672e+03    4353.7\n   hawker_prox_coef               3.0435e+03  100863.4\n   within_350m_kindergarten_coef  3.8679e+03   24965.7\n   mall_prox_coef                 1.0691e+04   55502.5\n   mrt_prox_coef                 -7.2434e+03  148627.2\n   park_prox_coef                -1.3584e+04   94005.1\n   within_1km_school_coef        -2.7247e+02    2829.4\n   supermarket_prox_coef         -1.0807e+04   28141.1\n\n   ****************       Results of GW prediction       ******************\n                       Min.   1st Qu.    Median   3rd Qu.      Max.\n   prediction        354574    475267    494160    528380    617913\n   prediction_var 737877010 745713670 752120804 759546466 799428816\n\n   ***********************************************************************\n   Program stops at: 2024-11-10 17:31:11.954878 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_pred_w, \"data/rds/ml/woodlands/gwr_pred_w.rds\")\n```\n:::\n\n\n::: callout-note\n**Summary of GWR Coefficients**\n\n**Interpretation**:\n\n-   **Intercept**: The baseline resale price in Woodlands varies significantly across locations, with a range from 373,726.15 to 929,191.50. This suggests that the average resale price can be strongly influenced by local spatial factors.\n\n-   **Floor Area**: The effect of floor area on resale price varies from a negative to a positive coefficient. In some locations, additional floor area has a relatively small positive impact, while in other locations, the effect is stronger.\n\n-   **Unit Age**: The negative impact of unit age on resale price is consistent across locations. Older units tend to have a more significant negative effect on resale prices, particularly in areas where newer properties dominate.\n\n-   **Proximity to Amenities**:\n\n    -   **Bus Stops**: Proximity to bus stops generally has a small positive effect in certain areas (range from -1,933.97 to 3,494.30).\n\n    -   **Elder Care Centers**: The proximity to eldercare centers has a more varied effect, with the coefficient ranging from negative to positive. In some regions, this proximity significantly increases resale prices.\n\n    -   **Hawker Centers**: The proximity to hawker centers shows a highly negative impact in many areas, especially in places where hawker centers are abundant and could be seen as less desirable.\n\n    -   **Kindergartens**: Proximity to kindergartens has a positive effect on property prices in certain locations, especially in family-oriented neighborhoods.\n\n    -   **Malls, MRT, Parks**: Proximity to malls and MRT stations tends to have a negative impact on resale prices in specific areas, while proximity to parks shows a more varied effect, with some areas benefiting from this proximity more than others.\n\n    -   **Supermarkets**: Proximity to supermarkets has a small negative effect on resale prices in some areas but is generally less influential compared to other amenities.\n\n**Prediction Results**\n\n**Interpretation**:\n\n-   The predicted resale prices range from **\\$359,170** to **\\$616,562**, with a median prediction of **\\$493,786**. This shows that the resale price in Woodlands varies significantly across locations.\n\n-   The **prediction variance** is substantial, ranging from **735 million** to **792 million**. This suggests considerable variability in the predicted prices, likely due to differing local factors influencing property values across different areas of Woodlands.\n\n**Overall**\n\nThe **Geographically Weighted Regression (GWR)** model provides a more accurate prediction of resale prices in **Woodlands** compared to traditional global models. By accounting for spatial variability, the GWR model captures how the relationship between property features and resale price changes across different locations.\n\n**Key findings**:\n\n-   **Floor area** and **unit age** have spatially varying impacts, with some regions showing stronger relationships between these variables and resale prices.\n\n-   **Proximity to amenities** such as **hawker centers**, **MRT stations**, and **supermarkets** shows spatial heterogeneity, with some areas benefiting more from proximity to these amenities than others.\n\n-   The **prediction results** indicate that resale prices vary widely across Woodlands, with certain regions experiencing higher values based on local factors like proximity to key amenities.\n:::\n:::::\n\n## Random Forest\n\n### Extracting coordinates data\n\n::: panel-tabset\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(data)\n```\n:::\n\n\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train_p <- st_coordinates(train_data_punggol)\ncoords_test_p <- st_coordinates(test_data_punggol)\n```\n:::\n\n\nBefore continue, we write all the output into rds for future used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train_p <- write_rds(coords_train_p, \"data/rds/ml/punggol/coords_train_p.rds\" )\ncoords_test_p <- write_rds(coords_test_p, \"data/rds/ml/punggol/coords_test_p.rds\" )\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train_w <- st_coordinates(train_data_woodlands)\ncoords_test_w <- st_coordinates(test_data_woodlands)\n```\n:::\n\n\nBefore continue, we write all the output into rds for future used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train_w <- write_rds(coords_train_w, \"data/rds/ml/coords_train_w.rds\" )\ncoords_test_w <- write_rds(coords_test_w, \"data/rds/ml/coords_test_w.rds\" )\n```\n:::\n\n:::\n\n### Dropping geometry field\n\nFirst, we will drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_punggol <- train_data_punggol %>% \n  st_drop_geometry() %>% \n  select(-town)\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_woodlands <- train_data_woodlands %>% \n  st_drop_geometry() %>% \n  select(-town)\n```\n:::\n\n:::\n\n## Calibrating Random Forest Model\n\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using random forest function of [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf_p <- ranger(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n             data=train_data_punggol)\nrf_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_punggol) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1549 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1285768219 \nR squared (OOB):                  0.6229873 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf_p, \"data/rds/ml/punggol/rf_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_p <- read_rds(\"data/rds/ml/punggol/rf_p.rds\")\nrf_p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_punggol) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1549 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1285768219 \nR squared (OOB):                  0.6229873 \n```\n\n\n:::\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf_w <- ranger(resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n             data=train_data_woodlands)\nrf_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_woodlands) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1391 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       681781375 \nR squared (OOB):                  0.7878284 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf_w, \"data/rds/ml/woodlands/rf_w.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_w <- read_rds(\"data/rds/ml/woodlands/rf_w.rds\")\nrf_w\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_woodlands) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1391 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       681781375 \nR squared (OOB):                  0.7878284 \n```\n\n\n:::\n:::\n\n:::\n\n## Calibrating Geographical Random Forest Model\n\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using `grf()` of [**SpatialML**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive_p <- grf(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                      dframe=train_data_punggol, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train_p,\n                     ntree = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_punggol, num.trees = 50, mtry = 3, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  50 \nSample size:                      1549 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       1310728297 \nR squared (OOB):                  0.6156685 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm                 unit_age      within_350m_busstop \n            6.326567e+11             1.156479e+12             1.244582e+11 \n   within_350m_eldercare              hawker_prox within_350m_kindergarten \n            1.596830e+11             5.174056e+11             1.464665e+11 \n               mall_prox                 mrt_prox                park_prox \n            5.932477e+11             3.333798e+11             2.561672e+11 \n       within_1km_school         supermarket_prox \n            1.749702e+11             3.213997e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-126714  -16526    2460    2945   23939  129080 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-96078.65 -13775.10    855.28    -58.52  14384.32 119674.72 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               Min         Max       Mean        StD\nfloor_area_sqm                   0 91014202939 5906598515 9572494892\nunit_age                 772992909 70292040371 9653682844 7816982408\nwithin_350m_busstop              0 23284152693 2079171556 2163833036\nwithin_350m_eldercare            0 22318151206  229763601  939144823\nhawker_prox              125992847 77365795037 4763798655 4696341821\nwithin_350m_kindergarten         0 22978183199  737940280 1744984043\nmall_prox                 89425394 51937220048 4875866267 4755292035\nmrt_prox                 131598882 29974992166 4057921881 3311668548\npark_prox                108935979 38285549900 4649691712 4018345994\nwithin_1km_school                0 22017741359  794052428 1434695546\nsupermarket_prox          38701460 63205009429 4233523256 4566974721\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive_p, \"data/rds/ml/punggol/gwRF_adaptive_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive_p <- read_rds(\"data/rds/ml/punggol/gwRF_adaptive_p.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive_w <- grf(formula = resale_price ~ floor_area_sqm +\n                 unit_age + within_350m_busstop +\n                 within_350m_eldercare + hawker_prox + \n                 within_350m_kindergarten + mall_prox +\n                 mrt_prox + park_prox +\n                 within_1km_school +\n                 supermarket_prox,\n                      dframe=train_data_woodlands, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train_w,\n                     ntree = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + unit_age + within_350m_busstop +      within_350m_eldercare + hawker_prox + within_350m_kindergarten +      mall_prox + mrt_prox + park_prox + within_1km_school + supermarket_prox,      data = train_data_woodlands, num.trees = 50, mtry = 3, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  50 \nSample size:                      1391 \nNumber of independent variables:  11 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       699465884 \nR squared (OOB):                  0.7823249 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm                 unit_age      within_350m_busstop \n            6.498645e+11             1.523757e+12             8.640691e+10 \n   within_350m_eldercare              hawker_prox within_350m_kindergarten \n            2.443447e+10             1.374084e+11             6.735891e+10 \n               mall_prox                 mrt_prox                park_prox \n            2.366135e+11             4.865546e+11             2.638215e+11 \n       within_1km_school         supermarket_prox \n            2.269810e+11             3.863464e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-162753.7  -14222.8       0.0     207.3   15208.6  104482.1 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-73326.46  -8051.71    102.83    -40.93   8585.95  73157.76 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               Min          Max       Mean         StD\nfloor_area_sqm                   0 119507423558 7235009419 12283139013\nunit_age                 290434405 162351531337 9787543745 16190314956\nwithin_350m_busstop       19024539 101166507333 3038063745  9092850294\nwithin_350m_eldercare            0  43950239157  391375201  1601131616\nhawker_prox              205434461 162703114194 4496604507  7941092644\nwithin_350m_kindergarten         0  28289156658  710152654  1940630865\nmall_prox                165366043  81654791451 4917757094  7011474221\nmrt_prox                 310086561  77191474562 4237235607  5629134036\npark_prox                166726290 137269067979 5310916373 12030607333\nwithin_1km_school                0  70335686672 1024510779  4531548436\nsupermarket_prox         154822760 168893795321 5782731401 13086332964\n```\n\n\n:::\n\n```{.r .cell-code}\nbeep(3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive_w, \"data/rds/ml/woodlands/gwRF_adaptive_w.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive_w <- read_rds(\"data/rds/ml/woodlands/gwRF_adaptive_w.rds\")\n```\n:::\n\n:::\n\n### Predicting by using test data\n\n#### Preparing the test data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_punggol <- cbind(test_data_punggol, coords_test_p) %>%\n  st_drop_geometry()\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_woodlands <- cbind(test_data_woodlands, coords_test_w) %>%\n  st_drop_geometry()\n```\n:::\n\n:::\n\n#### Predicting with test data\n\nNext, `predict.grf()` of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred_p <- predict.grf(gwRF_adaptive_p, \n                           test_data_punggol, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_p <- write_rds(gwRF_pred_p, \"data/rds/ml/punggol/gwRF_adaptive_p.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred_w <- predict.grf(gwRF_adaptive_w, \n                           test_data_woodlands, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_w <- write_rds(gwRF_pred_w, \"data/rds/ml/woodlands/gwRF_adaptive_w.rds\")\n```\n:::\n\n:::\n\n#### Converting the predicting output into a data frame\n\nThe output of the `predict.grf()` is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\n::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_p <- read_rds(\"data/rds/ml/punggol/gwRF_adaptive_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df_p <- as.data.frame(GRF_pred_p)\n```\n:::\n\n\nIn the code chunk below, `cbind()` is used to append the predicted values onto test_data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data_punggol, GRF_pred_df_p)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"data/rds/ml/punggol/test_data_p.rds\")\n```\n:::\n\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_w <- read_rds(\"data/rds/ml/woodlands/gwRF_adaptive_w.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df_w <- as.data.frame(GRF_pred_w)\n```\n:::\n\n\nIn the code chunk below, `cbind()` is used to append the predicted values onto test_data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_w <- cbind(test_data_woodlands, GRF_pred_df_w)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_w, \"data/rds/ml/woodlands/test_data_w.rds\")\n```\n:::\n\n:::\n\n### Calculating Root Mean Square Error\n\nThe root mean square error (RMSE) allows us to measure how far predicted values are from observed values in a regression analysis. In the code chunk below, rmse() of Metrics package is used to compute the RMSE.\n\n::::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_punggol$resale_price, \n     test_data_p$GRF_pred_p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49338.38\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(train_data_punggol$resale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 456000  566000  605000  606094  645000  800000 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(test_data_p$resale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 495000  610000  648000  650865  689166  788000 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Interpretation**\n\n1.  **Magnitude of the Error**:\n\n    -   The **RMSE of** \\$49,423.08 indicates that, on average, the model’s predicted resale prices deviate from the actual resale prices by approximately \\$**49,423.08.**\n\n    -   Given that the **mean resale price** for the **test dataset** is \\$**650,865**, this RMSE represents about **7.5%** of the mean resale price. This indicates a relatively reasonable model performance, with predictions being on average about **7.5%** off from actual resale prices.\n\n2.  **Comparison to Median**:\n\n    -   The **median resale price** in the **test dataset** is \\$**648,000**.\n\n    -   The **RMSE of \\$49,423.08** represents about **7.6%** of the median resale price, which suggests that the model’s predictions are, on average, off by **7.6%** from the actual resale price at the median.\n\n    -   Since the RMSE is around **7.5-8%** of both the **mean** and **median resale prices**, it suggests that the model performs fairly well, but there is still some degree of prediction error.\n\n3.  **Model Performance**:\n\n    -   An RMSE of \\$**49,423.08** is typical for real estate predictive models. It shows that while the model has a strong performance, especially considering it accounts for the variance in resale prices, there's still room for improvement, particularly for properties at the lower and higher price ranges.\n\n4.  **Range of Resale Prices**:\n\n    -   The resale prices in the test dataset range from \\$495,000 to \\$788,000. Given this price range, the RMSE of \\$**49,423.08** suggests that the model is accurate within **7-8%** for most properties, but the error could be higher for properties at the extremes (either low or high price points).\n\n    -   The **training dataset** has similar price distributions, but with a slightly lower mean of \\$606,094 compared to the test dataset’s mean of \\$**650,865**, which suggests that the model may be slightly more optimistic for higher resale prices in the test set.\n\n5.  **Comparison to the Training Data**:\n\n    -   The **training dataset** has a slightly higher mean resale price (\\$**606,094**) compared to the test dataset (\\$**650,865**), suggesting that the model might have been slightly undertrained or overfitted. This could be further analyzed by evaluating how well the model generalizes to the test data.\n\n    -   The relatively large **spread** between the lower and upper bounds of the resale prices (from \\$456,000 to \\$**800,000** in the training set) might also contribute to some variance in the predictions, though the RMSE indicates that the model is generally effective.\n\n**Conclusion:**\n\nThe **RMSE of** \\$\\$49,423.08 for the Punggol test dataset, where the median resale price is **648,000**, indicates that the model’s predictions are on average about **7.6%** off from the actual resale prices. This suggests that the model performs reasonably well, with error margins that are typical for real estate prediction models. While this level of error is acceptable, there is still room for improvement, particularly for properties at the lower and higher ends of the price spectrum.\n:::\n\n**Woodlands**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_woodlands$resale_price, \n     test_data_w$GRF_pred_w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 41784.94\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(train_data_woodlands$resale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 350000  470000  500000  507168  545000  690000 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(test_data_w$resale_price)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 355000  508500  530000  540097  570000  701000 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Interpretation**\n\n1\\. **Magnitude of the Error**\n\n-   The **RMSE of** \\$42,038.73 indicates that, on average, the model’s predicted resale prices deviate from the actual resale prices by \\$**42,038.73**\n\n-   This is a **7.8%** error when compared to the **mean resale price** in the test dataset (\\$**540,097**). This suggests that, on average, the model’s predictions are off by about **7.8%** of the actual resale price, which is a reasonable error margin for many predictive models.\n\n2\\. **Comparison to the Median**\n\n-   The **median resale price** in the **test dataset** is \\$**530,000**.\n\n-   The **RMSE of \\$42,038.73** represents about **7.9%** of the median resale price. This level of error is typical for real estate predictive models, and the fact that the RMSE is about **7.9%** of the median indicates that the model performs well for most of the data points, but there may still be some variability in predictions for properties priced far below or above the median.\n\n3\\. **Model Performance**\n\n-   The **RMSE of \\$42,038.73** shows that the model has a **moderate level of predictive accuracy**. An RMSE that is around **7-8%** of the median and mean resale prices is common for real estate prediction models, which often deal with diverse factors influencing property prices (e.g., location, condition of the property, etc.).\n\n-   The fact that the RMSE is relatively small compared to the range of resale prices suggests that the model captures the general trends well. However, there could be room for improvement, especially for properties with prices that are on the lower or upper extremes of the price spectrum.\n\n4\\. **Range of Resale Prices**\n\n-   The **range of resale prices** in the test dataset spans from \\$355,000 to \\$701,000, with the median at \\$530,000 and the mean at \\$**540,097**.\n\n-   The RMSE of \\$42,038.73 indicates that, on average, the predicted resale prices are within 7-8% of the actual resale prices. This is reasonable for most properties, but properties at the lower end (\\$355,000) or the **upper end** (\\$701,000) of the price range might have higher prediction errors. This suggests that the model works well for mid-range properties, but its accuracy decreases as we move toward the extremes of the price range.\n\n5\\. **Comparison to Training Data**\n\n-   The **median resale price** in the **training dataset** is \\$\\$500,000, which is 30,000 lower than the median resale price in the test dataset (5\\$**30,000**).\n\n-   The **mean** resale price in the training dataset is \\$507,168, which is also slightly lower than the mean of \\$**540,097** in the test dataset.\n\n-   This suggests that the test data might contain higher-value properties than the training data. Despite this difference, the model’s performance (as indicated by the RMSE) is fairly consistent, with the error remaining around **7.8%** of the test dataset's mean resale price.\n\n-   The **RMSE of** \\$42,038.73 relative to the training dataset's median resale price of \\$**500,000** is approximately **8.4%**, which is slightly higher than the RMSE relative to the test dataset’s median. This indicates that the model performs slightly better on the test dataset, potentially due to the difference in price distributions.\n\n**Conclusion:**\n\nThe **RMSE of** \\$42,038.73 for the Woodlands test dataset, where the median resale price is \\$**530,000**, suggests that the model's predictions are, on average, about **7.9%** off from the actual resale prices. This is a reasonable level of predictive accuracy, indicating that the model is performing well overall, with small but acceptable prediction errors for properties within the typical price range.\n\nThe model appears to perform slightly better on the **test dataset**, which has higher property prices than the training dataset. Further model refinement or feature adjustment may help reduce errors for properties at the extremes of the price range. However, for general purposes, the model seems reliable for predicting resale prices within the observed price ranges.\n:::\n:::::\n\n## Visualising the predicted values\n\nAlternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n::::: panel-tabset\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred_p,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](TakeHome3_files/figure-html/unnamed-chunk-217-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nObservation\n\n1.  **Positive Correlation**:\n\n    -   There is a clear **positive relationship** between the predicted resale prices (**GRF_pred_p**) and the actual resale prices (**resale_price**). As the predicted resale prices increase, the actual resale prices also tend to increase.\n\n    -   This suggests that the model's predictions are generally in line with the observed data, as higher predicted values correspond to higher actual resale prices.\n\n2.  **Trend and Distribution**:\n\n    -   The points follow an upward trend, with a generally **tight clustering** around the line of best fit (not shown, but implied by the alignment of points). This indicates that the model is effectively capturing the main trend in the data.\n\n    -   The scatter is somewhat **spread out**, indicating some variance between the predicted and actual resale prices. This is typical in any real-world prediction model, as it shows that the model is not perfect and that there are some discrepancies between predicted and actual values.\n\n3.  **Outliers**:\n\n    -   Although the points generally follow a clear upward trend, there might be a few **outliers** or data points that deviate significantly from the general trend. These outliers could represent cases where the model performs poorly or where there are unusual observations in the data.\n\n4.  **Model Fit**:\n\n    -   The strong linear trend suggests that the model has captured the general relationship between the variables, but some level of variability remains. To assess how well the model performs, you would typically calculate performance metrics like **R-squared**, **RMSE**, or **MAE** to quantify how well the model's predictions match the actual values.\n\nConclusion:\n\nThe scatterplot shows that there is a positive relationship between predicted resale prices (**GRF_pred_p**) and actual resale prices (**resale_price**). This suggests that the model is successful in capturing the general trend of the data, but some discrepancies remain, which is expected in any predictive model. Further analysis, such as residual analysis or model evaluation metrics, could be done to refine the model and assess its performance more thoroughly.\n:::\n\n**Woodlands**\n\n::: callout-note\n**Observation**\n\n1.  **Positive Correlation**:\n\n    -   There is a **strong positive correlation** between **GRF_pred_w** (predicted resale prices) and **resale_price** (actual resale prices). As the predicted resale prices increase, the actual resale prices also tend to increase.\n\n    -   This indicates that the model's predictions are generally aligned with the observed data, and the higher predicted values tend to correspond to higher actual resale prices.\n\n2.  **Trend and Distribution**:\n\n    -   The points show a clear **upward trend**, indicating a **good linear relationship** between the predicted and actual values.\n\n    -   The scatter around the trend is **relatively tight**, meaning that the model's predictions are fairly close to the actual resale prices. This suggests that the model is capturing the trend in the data well.\n\n3.  **Outliers**:\n\n    -   Some **outliers** may exist at the higher end of the resale price range. These points appear to deviate slightly from the general trend, but they do not seem to be too far from the line of best fit. These outliers could represent cases where the model does not predict well for certain properties, possibly due to extreme values or unique characteristics of those observations.\n\n4.  **Model Fit**:\n\n    -   The strong linear relationship in the scatterplot indicates that the model fits the data well. However, there may still be room for improvement in reducing the variance in predictions, as indicated by the slight spread of points, especially for lower resale prices.\n\n5.  **Comparison to the Previous Scatterplot**:\n\n    -   Compared to the first scatterplot with **GRF_pred_p**, this scatterplot (with **GRF_pred_w**) shows a **similar pattern** of positive correlation between predicted and actual resale prices. Both scatterplots indicate good predictive performance, with minor deviations in predicted values at the lower and higher ends.\n\nConclusion:\n\nThe scatterplot suggests that the model with **GRF_pred_w** effectively captures the relationship between the predictors and actual resale prices, with strong predictive accuracy. The positive correlation and tight clustering of points indicate that the model is reliable for predicting resale prices. However, further evaluation using residual analysis or model evaluation metrics could help identify areas for improvement, particularly in the presence of outliers.\n:::\n:::::\n\n## Evaluation of Model: Geographically Weighted Regression Vs Random Forest\n\n::: panel-tabset\n**Punggol**\n\nTo compare the two methods—Random Forest (RF) and Geographically Weighted Regression (GWR)—for predicting resale prices in Punggol, let's focus on the prediction accuracy and model performance.\n\n1\\. Prediction Accuracy:\n\nRandom Forest:\n\n-   RMSE: The Random Forest model has an RMSE of 49,423.08, which measures the average error between the predicted and actual resale prices. A lower RMSE indicates better accuracy.\n\n-   Price Distribution:\n\n    -   **Training Data**: Min 456,000, Median 605,000, Max 800,000.\n\n    -   **Test Data**: Min 495,000, Median 648,000, Max 788,000.\n\nThe predicted resale prices in the test data are within the expected range and the RMSE indicates that the Random Forest model performs fairly well.\n\nGWR:\n\n-   Predicted Values: The predicted resale prices from the GWR model range from 463,945 to 707,938, with a median of 609,348.\n\n-   Prediction Variance: The variance of predictions ranges from 1.25 billion to 1.4 billion, indicating some spread in the predictions, which is typical of GWR since it accounts for spatial variability.\n\nThe predicted resale prices from GWR are also within the expected range, with a similar spread as the actual test data.\n\n2.  Model Calibration:\n\nRandom Forest:\n\n-   Strength: Random Forest is well-suited for handling complex, non-linear relationships between predictors without explicit assumptions about their functional form.\n\n-   Weakness: It is harder to interpret and doesn't directly provide insights into how individual variables (like distance to bus stops, malls, etc.) influence the resale prices.\n\nGWR:\n\n-   Strength: GWR allows for spatial variation in the coefficients, meaning it can show how the effect of each predictor (like `floor_area_sqm`, `unit_age`, etc.) changes across different locations. This makes GWR especially valuable for understanding local variations in resale prices.\n\n-   Weakness: GWR requires more complex interpretation, as it provides different coefficients for each observation based on the local neighborhood.\n\n3.  Which Model is Better?\n\n-   Prediction Accuracy: Both models provide similar ranges of predicted resale prices. However, Random Forest has a slightly better RMSE (49,423.08), which suggests it may perform slightly better in terms of overall prediction accuracy.\n\n-   Interpretability: GWR excels in interpretability, as it provides insights into how different factors affect resale prices in different parts of Punggol, thanks to its spatially varying coefficients. This is valuable if you need to understand the localized impact of each predictor.\n\nWoodlands\n\n1\\. Prediction Accuracy:\n\nRandom Forest:\n\n-   RMSE: The RMSE for the Random Forest model is 42,038.73. Lower RMSE indicates better prediction accuracy, and this value is quite reasonable, suggesting good performance for predicting resale prices.\n\n-   Price Summary:\n\n    -   **Training Data**: Min 350,000, Median 500,000, Max 690,000.\n\n    -   **Test Data**: Min 355,000, Median 530,000, Max 701,000.\n\n    The test data's price distribution suggests that the model is predicting within the expected range.\n\nGWR:\n\n-   Prediction: The GWR model gives predicted resale prices ranging from 359,170 to 616,562, with a median of 493,786. This is fairly close to the actual resale prices in the test data (from 355,000 to 701,000), indicating that GWR is also performing reasonably well for predictions.\n\n-   Prediction Variance: The prediction variance ranges from 735,748,898 to 792,698,476, suggesting that the GWR model's predictions have some spread, but this is expected since GWR accounts for spatial variation.\n\n2.  Model Calibration:\n\nRandom Forest:\n\n-   Random Forest tends to perform well when capturing complex, non-linear relationships between predictors. It doesn't offer easy interpretability, but it can model interactions between variables without explicitly specifying them. Given that the RMSE is relatively low (42,038.73), the model seems to be doing well in predicting resale prices.\n\nGWR:\n\n-   Model Calibration Information: The coefficients for the GWR model vary spatially, and the values seem reasonable (e.g., for `floor_area_sqm`, the coefficient ranges from -3419.735 to 3037.7). These coefficients represent the local effect of each variable on resale prices.\n\n-   Interpretability: One key strength of GWR is that it allows you to understand how each variable affects resale prices differently in various spatial locations (e.g., the effect of proximity to bus stops, hawker centers, or supermarkets varies across the region).\n\n3.  Which Model is Better?\n\n-   Prediction Accuracy: Both models give similar ranges for predicted resale prices, and both seem to predict the prices reasonably well. However, Random Forest generally provides a more reliable prediction with lower RMSE (42,038.73), indicating better overall performance in terms of predictive accuracy.\n\n-   Interpretability: If you need to understand how each factor influences resale prices in different regions of Woodlands, GWR is a better choice because of its spatially varying coefficients and ability to show how variables interact with location.\n:::\n\n\n## Limitations\n\nThis study only looks into two the top two towns that has the most transactions and the transactions are slightly below 2 years. Hence, the sample size may be size which inevitably affecting the model. Thus, future proposal may look into top 5 - 10 towns over a span of 5 years. Additonally, only two predictive models were used. Future studies may consider other models such as Xboost in comparing across the models predictive abilities.\n\n## Conclusion\n\nTo summarise, Random Forest is better in predicting HDB resale prices. However, geospatial details are heavily embedded in HDB resale data, we shouldn't discount the spatial aspects that will affect the resale prices too. If the study's purpose is to understand spatial patterns, GWR is more suited. Conversely, if accuracy is a priority, Random Forest is a better choice.\n",
    "supporting": [
      "TakeHome3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}