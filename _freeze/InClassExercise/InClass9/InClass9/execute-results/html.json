{
  "hash": "7d8716427e1420ff1651087abd249ab2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 9\"\nauthor: \"Joshua TING\"\ndate: \"28 October, 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute:\n  eval: false #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, spdep, GWmodel, SpatialML, rsample, Metrics, tidyverse, knitr, kableExtra)\n```\n:::\n\n\nELDERCARE is in shapefile format, the code chunk below will be used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/EldercareServicesSHP\",\n                     layer = \"ELDERCARE\") %>% \n  st_transform(crs=3414)\n```\n:::\n\n\nCode chunk below is used to import fml file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCHAS <- st_read(\"data/CHASClinics.kml\") %>% \n  st_transform(crs=3414)\n```\n:::\n\n\nSt_buffer of sf package is used to a buffer of 1km of around each eldercare features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_km <- st_buffer(eldercare, \n                        dist = 1000)\n```\n:::\n\n\nthe code chunk belwo is used to plot the newly created buffers and the CHAS clinic\n\nPLOT THE POLYGON FIRST then the point\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot') #view\ntm_shape(buffer_km) +\n  tm_polygons(alpha=.3) +\ntm_shape(CHAS) +\n  tm_dots()\n```\n:::\n\n\ncode chunk below is used to count the number of CHAS clinics with 1km of each eldercare centre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_km$pts_counts <- lengths( #length returns in the new field name pts count\n  st_intersects(buffer_km, CHAS))\n```\n:::\n\n\n::: callout-note\n## spatstat do not like point z\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/model/mdata.rds\") %>%\n  st_jitter(amount= 2) #in metres\n#jitter is displacement of the same point\n```\n:::\n\n\nif use gwr, coordinates that are the same will return nothing. thus, need to st_jitter to shift alittle. Shouldn't use decimal as if might be 0.\n\nEg: 10 transactions in one hdb flat. then need to jitter to displace the distance alittle.\n\n::: callout-note\n## what are the codes to see overlapping\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(SpatialACC, sf, tidyverse, tmap, ggstatsplot)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                layer=\"MP14_SUBZONE_NO_SEA_PL\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- st_read(dsn = \"data/geospatial\",\n                    layer = \"hexagons\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <-st_read(dsn = \"data/geospatial\",\n                    layer = \"ELDERCARE\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\",\n                     skip = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- eldercare %>% \n  select(fid, ADDRESSPOS) %>%\n  mutate(capacity = 100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagons <- hexagons %>% \n  select(fid) %>% \n  mutate(demand=100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat <- ODMatrix %>% \n  select(origin_id, destination_id, total_cost) %>% \n  spread(destination_id, total_cost) %>% #converts to matrix instead making it into long and thin \n  select(-c('origin_id'))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistmat_km <- as.matrix(distmat/1000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_Hansen <- data.frame(ac(hexagons$demand, #distance\n                            eldercare$capacity, #origin\n                            distmat_km, \n                            #d0 = 50, #distance limits\n                            power = 2, #can change the power\n                            family = \"Hansen\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(acc_Hansen) <- \"accHansen\"\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmapex <- st_bbox(hexagons)\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}