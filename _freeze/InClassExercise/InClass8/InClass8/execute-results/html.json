{
  "hash": "f10ff747904d6a4d77378a41c5c56aae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 8\"\nauthor: \"Joshua TING\"\ndate: \"21 October, 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute:\n  eval: true #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n\n#In class Exercise 9\n\n## Installing & Loading R Packages\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse,\n               knitr, kableExtra)\n```\n:::\n\n\n## Data Import\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/model/mdata.rds\")\n```\n:::\n\n\n## Data Sampling\nCalibrating predictive models are computational intensive, especially random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n\n## Checking of overlapping point\nWhen using GWmodel to calibrate explanatory or predictive models, it is very important to ensure that there are no overlapping point features.\nThe code chunk below is used to check if there are overlapping point features.\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\n## Spatial Jitter\nIn the code code chunk below, st_jitter() of sf package is used to move the point features by 5m to avoid overlapping point features.\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount = 5)\n```\n:::\n\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(HDB_sample, \n                              prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n## Multicollinearity check\nIn order to avoid multicollineariy. In the code chunk below, ggcorrmat() of ggstatsplot is used to plot a correlation matrix to check if there are pairs of highly correlated independent variables.\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](InClass8_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Building a non-spatial multiple linear regression\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.862       RMSE                    60813.316 \nR-Squared                   0.742       MSE                3754578098.252 \nAdj. R-Squared              0.739       Coef. Var                  14.255 \nPred R-Squared              0.734       AIC                     24901.005 \nMAE                     45987.256       SBC                     24979.529 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                      \n-------------------------------------------------------------------------------\n                    Sum of                                                     \n                   Squares         DF         Mean Square       F         Sig. \n-------------------------------------------------------------------------------\nRegression    1.065708e+13         14    761220078101.236    202.745    0.0000 \nResidual      3.698259e+12        985      3754578098.252                      \nTotal         1.435534e+13        999                                          \n-------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    115703.696     34303.409                   3.373    0.001     48387.533    183019.860 \n          floor_area_sqm      2778.618       292.262        0.165      9.507    0.000      2205.089      3352.146 \n            storey_order     12698.165      1070.950        0.211     11.857    0.000     10596.559     14799.771 \n    remaining_lease_mths       350.252        14.596        0.450     23.997    0.000       321.610       378.894 \n                PROX_CBD    -16225.588       630.092       -0.572    -25.751    0.000    -17462.065    -14989.110 \n        PROX_ELDERLYCARE    -11330.930      3220.845       -0.061     -3.518    0.000    -17651.436     -5010.423 \n             PROX_HAWKER    -19964.070      4021.046       -0.087     -4.965    0.000    -27854.872    -12073.268 \n                PROX_MRT    -39652.516      5412.288       -0.130     -7.326    0.000    -50273.456    -29031.577 \n               PROX_PARK    -15878.322      4609.199       -0.061     -3.445    0.001    -24923.300     -6833.344 \n               PROX_MALL    -15910.922      6438.111       -0.048     -2.471    0.014    -28544.911     -3276.933 \n        PROX_SUPERMARKET    -18928.514     13304.965       -0.025     -1.423    0.155    -45037.848      7180.821 \nWITHIN_350M_KINDERGARTEN      9309.735      2024.293        0.079      4.599    0.000      5337.313     13282.157 \n   WITHIN_350M_CHILDCARE     -1619.514      1180.948       -0.026     -1.371    0.171     -3936.977       697.948 \n         WITHIN_350M_BUS      -447.695       738.715       -0.011     -0.606    0.545     -1897.331      1001.940 \n       WITHIN_1KM_PRISCH    -10698.012      1543.511       -0.138     -6.931    0.000    -13726.960     -7669.065 \n------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n## Multicollinearity check with VIF\n\n### VIF\n\n::: {.cell}\n\n```{.r .cell-code}\nvif <- performance::check_collinearity(price_mlr)\nkable(vif, \n      caption = \"Variance Inflation Factor (VIF) Results\") %>%\n  kable_styling(font_size = 18) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflation Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.146686 </td>\n   <td style=\"text-align:right;\"> 1.085743 </td>\n   <td style=\"text-align:right;\"> 1.250945 </td>\n   <td style=\"text-align:right;\"> 1.070834 </td>\n   <td style=\"text-align:right;\"> 0.8720785 </td>\n   <td style=\"text-align:right;\"> 0.7993954 </td>\n   <td style=\"text-align:right;\"> 0.9210287 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.206020 </td>\n   <td style=\"text-align:right;\"> 1.135720 </td>\n   <td style=\"text-align:right;\"> 1.312734 </td>\n   <td style=\"text-align:right;\"> 1.098189 </td>\n   <td style=\"text-align:right;\"> 0.8291736 </td>\n   <td style=\"text-align:right;\"> 0.7617690 </td>\n   <td style=\"text-align:right;\"> 0.8804986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.343645 </td>\n   <td style=\"text-align:right;\"> 1.254833 </td>\n   <td style=\"text-align:right;\"> 1.463410 </td>\n   <td style=\"text-align:right;\"> 1.159157 </td>\n   <td style=\"text-align:right;\"> 0.7442440 </td>\n   <td style=\"text-align:right;\"> 0.6833358 </td>\n   <td style=\"text-align:right;\"> 0.7969186 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.887898 </td>\n   <td style=\"text-align:right;\"> 1.733977 </td>\n   <td style=\"text-align:right;\"> 2.074096 </td>\n   <td style=\"text-align:right;\"> 1.374008 </td>\n   <td style=\"text-align:right;\"> 0.5296898 </td>\n   <td style=\"text-align:right;\"> 0.4821378 </td>\n   <td style=\"text-align:right;\"> 0.5767088 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.140418 </td>\n   <td style=\"text-align:right;\"> 1.080572 </td>\n   <td style=\"text-align:right;\"> 1.244716 </td>\n   <td style=\"text-align:right;\"> 1.067904 </td>\n   <td style=\"text-align:right;\"> 0.8768712 </td>\n   <td style=\"text-align:right;\"> 0.8033960 </td>\n   <td style=\"text-align:right;\"> 0.9254357 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.183865 </td>\n   <td style=\"text-align:right;\"> 1.116887 </td>\n   <td style=\"text-align:right;\"> 1.289223 </td>\n   <td style=\"text-align:right;\"> 1.088056 </td>\n   <td style=\"text-align:right;\"> 0.8446907 </td>\n   <td style=\"text-align:right;\"> 0.7756609 </td>\n   <td style=\"text-align:right;\"> 0.8953457 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.211390 </td>\n   <td style=\"text-align:right;\"> 1.140307 </td>\n   <td style=\"text-align:right;\"> 1.318485 </td>\n   <td style=\"text-align:right;\"> 1.100632 </td>\n   <td style=\"text-align:right;\"> 0.8254980 </td>\n   <td style=\"text-align:right;\"> 0.7584464 </td>\n   <td style=\"text-align:right;\"> 0.8769566 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.186122 </td>\n   <td style=\"text-align:right;\"> 1.118797 </td>\n   <td style=\"text-align:right;\"> 1.291599 </td>\n   <td style=\"text-align:right;\"> 1.089092 </td>\n   <td style=\"text-align:right;\"> 0.8430839 </td>\n   <td style=\"text-align:right;\"> 0.7742340 </td>\n   <td style=\"text-align:right;\"> 0.8938169 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.435504 </td>\n   <td style=\"text-align:right;\"> 1.335252 </td>\n   <td style=\"text-align:right;\"> 1.565736 </td>\n   <td style=\"text-align:right;\"> 1.198125 </td>\n   <td style=\"text-align:right;\"> 0.6966193 </td>\n   <td style=\"text-align:right;\"> 0.6386771 </td>\n   <td style=\"text-align:right;\"> 0.7489224 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.226727 </td>\n   <td style=\"text-align:right;\"> 1.153448 </td>\n   <td style=\"text-align:right;\"> 1.335000 </td>\n   <td style=\"text-align:right;\"> 1.107577 </td>\n   <td style=\"text-align:right;\"> 0.8151773 </td>\n   <td style=\"text-align:right;\"> 0.7490638 </td>\n   <td style=\"text-align:right;\"> 0.8669656 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.123989 </td>\n   <td style=\"text-align:right;\"> 1.067172 </td>\n   <td style=\"text-align:right;\"> 1.228865 </td>\n   <td style=\"text-align:right;\"> 1.060183 </td>\n   <td style=\"text-align:right;\"> 0.8896886 </td>\n   <td style=\"text-align:right;\"> 0.8137594 </td>\n   <td style=\"text-align:right;\"> 0.9370564 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.387119 </td>\n   <td style=\"text-align:right;\"> 1.292841 </td>\n   <td style=\"text-align:right;\"> 1.511748 </td>\n   <td style=\"text-align:right;\"> 1.177760 </td>\n   <td style=\"text-align:right;\"> 0.7209189 </td>\n   <td style=\"text-align:right;\"> 0.6614860 </td>\n   <td style=\"text-align:right;\"> 0.7734902 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.193498 </td>\n   <td style=\"text-align:right;\"> 1.125056 </td>\n   <td style=\"text-align:right;\"> 1.299398 </td>\n   <td style=\"text-align:right;\"> 1.092473 </td>\n   <td style=\"text-align:right;\"> 0.8378731 </td>\n   <td style=\"text-align:right;\"> 0.7695869 </td>\n   <td style=\"text-align:right;\"> 0.8888447 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.508943 </td>\n   <td style=\"text-align:right;\"> 1.399770 </td>\n   <td style=\"text-align:right;\"> 1.647930 </td>\n   <td style=\"text-align:right;\"> 1.228390 </td>\n   <td style=\"text-align:right;\"> 0.6627154 </td>\n   <td style=\"text-align:right;\"> 0.6068219 </td>\n   <td style=\"text-align:right;\"> 0.7144029 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Plotting VIF\n\n::: {.cell}\n\n```{.r .cell-code}\nvif <- performance::check_collinearity(price_mlr)\nkable(vif, \n      caption = \"Variance Inflation Factor (VIF) Results\") %>%\n  kable_styling(font_size = 18) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflation Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.146686 </td>\n   <td style=\"text-align:right;\"> 1.085743 </td>\n   <td style=\"text-align:right;\"> 1.250945 </td>\n   <td style=\"text-align:right;\"> 1.070834 </td>\n   <td style=\"text-align:right;\"> 0.8720785 </td>\n   <td style=\"text-align:right;\"> 0.7993954 </td>\n   <td style=\"text-align:right;\"> 0.9210287 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.206020 </td>\n   <td style=\"text-align:right;\"> 1.135720 </td>\n   <td style=\"text-align:right;\"> 1.312734 </td>\n   <td style=\"text-align:right;\"> 1.098189 </td>\n   <td style=\"text-align:right;\"> 0.8291736 </td>\n   <td style=\"text-align:right;\"> 0.7617690 </td>\n   <td style=\"text-align:right;\"> 0.8804986 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.343645 </td>\n   <td style=\"text-align:right;\"> 1.254833 </td>\n   <td style=\"text-align:right;\"> 1.463410 </td>\n   <td style=\"text-align:right;\"> 1.159157 </td>\n   <td style=\"text-align:right;\"> 0.7442440 </td>\n   <td style=\"text-align:right;\"> 0.6833358 </td>\n   <td style=\"text-align:right;\"> 0.7969186 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.887898 </td>\n   <td style=\"text-align:right;\"> 1.733977 </td>\n   <td style=\"text-align:right;\"> 2.074096 </td>\n   <td style=\"text-align:right;\"> 1.374008 </td>\n   <td style=\"text-align:right;\"> 0.5296898 </td>\n   <td style=\"text-align:right;\"> 0.4821378 </td>\n   <td style=\"text-align:right;\"> 0.5767088 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.140418 </td>\n   <td style=\"text-align:right;\"> 1.080572 </td>\n   <td style=\"text-align:right;\"> 1.244716 </td>\n   <td style=\"text-align:right;\"> 1.067904 </td>\n   <td style=\"text-align:right;\"> 0.8768712 </td>\n   <td style=\"text-align:right;\"> 0.8033960 </td>\n   <td style=\"text-align:right;\"> 0.9254357 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.183865 </td>\n   <td style=\"text-align:right;\"> 1.116887 </td>\n   <td style=\"text-align:right;\"> 1.289223 </td>\n   <td style=\"text-align:right;\"> 1.088056 </td>\n   <td style=\"text-align:right;\"> 0.8446907 </td>\n   <td style=\"text-align:right;\"> 0.7756609 </td>\n   <td style=\"text-align:right;\"> 0.8953457 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.211390 </td>\n   <td style=\"text-align:right;\"> 1.140307 </td>\n   <td style=\"text-align:right;\"> 1.318485 </td>\n   <td style=\"text-align:right;\"> 1.100632 </td>\n   <td style=\"text-align:right;\"> 0.8254980 </td>\n   <td style=\"text-align:right;\"> 0.7584464 </td>\n   <td style=\"text-align:right;\"> 0.8769566 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.186122 </td>\n   <td style=\"text-align:right;\"> 1.118797 </td>\n   <td style=\"text-align:right;\"> 1.291599 </td>\n   <td style=\"text-align:right;\"> 1.089092 </td>\n   <td style=\"text-align:right;\"> 0.8430839 </td>\n   <td style=\"text-align:right;\"> 0.7742340 </td>\n   <td style=\"text-align:right;\"> 0.8938169 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.435504 </td>\n   <td style=\"text-align:right;\"> 1.335252 </td>\n   <td style=\"text-align:right;\"> 1.565736 </td>\n   <td style=\"text-align:right;\"> 1.198125 </td>\n   <td style=\"text-align:right;\"> 0.6966193 </td>\n   <td style=\"text-align:right;\"> 0.6386771 </td>\n   <td style=\"text-align:right;\"> 0.7489224 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.226727 </td>\n   <td style=\"text-align:right;\"> 1.153448 </td>\n   <td style=\"text-align:right;\"> 1.335000 </td>\n   <td style=\"text-align:right;\"> 1.107577 </td>\n   <td style=\"text-align:right;\"> 0.8151773 </td>\n   <td style=\"text-align:right;\"> 0.7490638 </td>\n   <td style=\"text-align:right;\"> 0.8669656 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.123989 </td>\n   <td style=\"text-align:right;\"> 1.067172 </td>\n   <td style=\"text-align:right;\"> 1.228865 </td>\n   <td style=\"text-align:right;\"> 1.060183 </td>\n   <td style=\"text-align:right;\"> 0.8896886 </td>\n   <td style=\"text-align:right;\"> 0.8137594 </td>\n   <td style=\"text-align:right;\"> 0.9370564 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.387119 </td>\n   <td style=\"text-align:right;\"> 1.292841 </td>\n   <td style=\"text-align:right;\"> 1.511748 </td>\n   <td style=\"text-align:right;\"> 1.177760 </td>\n   <td style=\"text-align:right;\"> 0.7209189 </td>\n   <td style=\"text-align:right;\"> 0.6614860 </td>\n   <td style=\"text-align:right;\"> 0.7734902 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.193498 </td>\n   <td style=\"text-align:right;\"> 1.125056 </td>\n   <td style=\"text-align:right;\"> 1.299398 </td>\n   <td style=\"text-align:right;\"> 1.092473 </td>\n   <td style=\"text-align:right;\"> 0.8378731 </td>\n   <td style=\"text-align:right;\"> 0.7695869 </td>\n   <td style=\"text-align:right;\"> 0.8888447 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.508943 </td>\n   <td style=\"text-align:right;\"> 1.399770 </td>\n   <td style=\"text-align:right;\"> 1.647930 </td>\n   <td style=\"text-align:right;\"> 1.228390 </td>\n   <td style=\"text-align:right;\"> 0.6627154 </td>\n   <td style=\"text-align:right;\"> 0.6068219 </td>\n   <td style=\"text-align:right;\"> 0.7144029 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Predictive Modelling with gwr\n### Computing adaptive bandwidth\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.459032e+12 \nAdaptive bandwidth: 394 CV score: 3.231786e+12 \nAdaptive bandwidth: 250 CV score: 2.914736e+12 \nAdaptive bandwidth: 162 CV score: 2.610897e+12 \nAdaptive bandwidth: 107 CV score: 2.240188e+12 \nAdaptive bandwidth: 73 CV score: 1.971641e+12 \nAdaptive bandwidth: 52 CV score: 1.797271e+12 \nAdaptive bandwidth: 39 CV score: 1.659472e+12 \nAdaptive bandwidth: 31 CV score: 1.573963e+12 \nAdaptive bandwidth: 26 CV score: 1.550147e+12 \nAdaptive bandwidth: 23 CV score: 1.542544e+12 \nAdaptive bandwidth: 21 CV score: 1.518885e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n## Model Calibration\n### Code\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n## Predicting Modelling with MLR\n### Predicting with test data\n#### Test data bw\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 316 CV score: 1.752181e+12 \nAdaptive bandwidth: 203 CV score: 1.635856e+12 \nAdaptive bandwidth: 132 CV score: 1.452381e+12 \nAdaptive bandwidth: 89 CV score: 1.292305e+12 \nAdaptive bandwidth: 61 CV score: 1.115867e+12 \nAdaptive bandwidth: 45 CV score: 1.007764e+12 \nAdaptive bandwidth: 34 CV score: 886240690081 \nAdaptive bandwidth: 28 CV score: 859792519354 \nAdaptive bandwidth: 23 CV score: 856247388820 \nAdaptive bandwidth: 21 CV score: 846203688027 \nAdaptive bandwidth: 19 CV score: 837013751205 \nAdaptive bandwidth: 18 CV score: 8.32968e+11 \nAdaptive bandwidth: 17 CV score: 834218488853 \nAdaptive bandwidth: 18 CV score: 8.32968e+11 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data, \n                        predictdata = test_data, \n                        bw=bw_adaptive, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n\n## Predictive Modelling: RF method\n### Data Preparation\nirstly, code chunk below is used to extract the coordinates of training and test data sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\nNext, code chunk below is used to drop the geometry column of both training and test data sets.\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>%\n  st_drop_geometry()\n```\n:::\n\n\n### Calibrating RF model\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n```\n:::\n\n\n### Model output\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2283173758 \nR squared (OOB):                  0.8411121 \n```\n\n\n:::\n:::\n\n\n\n## Predicting Modelling:: SpatialML method\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + \n                       storey_order + remaining_lease_mths + \n                       PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n                       PROX_MRT + PROX_PARK + PROX_MALL + \n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2074009887 \nR squared (OOB):                  0.8556679 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm             storey_order     remaining_lease_mths \n            6.858004e+11             1.422012e+12             2.486068e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.638477e+12             5.479231e+11             6.521805e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            8.441291e+11             5.449257e+11             4.405820e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.776907e+11             1.277977e+11             2.369706e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.184408e+11             7.997281e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-221080.0  -21530.3    -895.4    -271.1   20305.0  296404.4 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-38672.86  -3227.99   -178.43    -71.12   2831.66  42872.18 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                Min          Max         Mean          StD\nfloor_area_sqm            696919686 192865321765  24393255920  32201130831\nstorey_order              517785315 319895669535  27780386721  50723636275\nremaining_lease_mths     2957069739 610102523068 100407363399 137038263288\nPROX_CBD                  962467743 343722236312  30938242726  48859511192\nPROX_ELDERLYCARE         1897793617 150381230352  23249130891  25384606673\nPROX_HAWKER              1035238085 214011373785  20753714949  24523766193\nPROX_MRT                 1130621303 267464693079  28928314326  46397690636\nPROX_PARK                1137628579 179606297600  19965989625  21334314778\nPROX_MALL                1278390826 271590767488  27256268534  40402723719\nPROX_SUPERMARKET          991735075 176833138872  18996601028  27059219290\nWITHIN_350M_KINDERGARTEN  173811210  49153266122   5742647253   7358559963\nWITHIN_350M_CHILDCARE     445891832 182607185549  18494577567  33745415431\nWITHIN_350M_BUS           590779439 142390607080   9066032058  11317330875\nWITHIN_1KM_PRISCH         220777233  60582254997   6408000068   7434712348\n```\n\n\n:::\n:::\n\n\n## Predicting by using the test data\n### Preparing the test data\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n### Predicting with test data\nIn the code chunk below, predict.grf() of spatialML for predicting re-sale prices in the test data set (i.e. test_data_nogeom)\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data_nogeom, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n##Creating DF\nNext, the code chunk below is used to convert the output from predict.grf() into a data.frame.\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred_df <- as.data.frame(gwRF_pred)\n```\n:::\n\n\nThen, cbind() is used to append fields in GRF_pred_df data.frame onto test_data.\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- cbind(test_data, \n                        GRF_pred_df)\n```\n:::\n",
    "supporting": [
      "InClass8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}