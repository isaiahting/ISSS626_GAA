{
  "hash": "437feb1317f80a91e4406697c03b7445",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 6\"\nauthor: \"Joshua TING\"\ndate: \"30 September, 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute:\n  eval: false #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, kendell)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\",\n                  layer = \"Hunan\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_st <- spacetime(GDPPC, hunan, #GDPPC is attirbute while hunan is geospatial\n                      .loc_col = \"County\", \n                      .time_col = \"Year\") #cannot use original time and date fiekld\n```\n:::\n\n\nThe above code has multiple layer due to different timeS.\n\nHint:Need to convert day to integer OR drop the day. Cannot need to have decimals places. Need to use lubridate to change to POSIXct.\n\nBelow code is to check if it is a time-space cube.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(GDPPC_st)\n```\n:::\n\n\n### [Spacetime Cubes](https://sfdep.josiahparry.com/articles/spacetime-s3)\n\nA spacetime object is a spacetime cube if every location has a value for every time index. Another way of saying this is that each location contains a regular time-series.\n\nIn ESRI terminology, the basic unit of a spacetime cube is a *bin*. A bin is the unique combination of a location and time index. For each time index, the collection of every location is called a *time slice*. In every location, the collection of every bin at each time index is referred to as a a *bin time-series*.\n\n[![](images/GUID-0FEECE1A-6B54-44B4-AE49-05E7EA849A8B-web.png)](https://sfdep.josiahparry.com/articles/spacetime-s3)\n\n## Inputing Computing Gi\\*\n\n*Good in detecting hotspot (incidences) and coldspot (low incidences)*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb,\n                              geometry,\n                              scale = 1,\n                              alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n\n::: callout-note\n## Things to learn from above code chunk\n\n-   Activate() of dplyr package is used to activate the geometry context\n\n-   mutate() of dplyr package is used to create two new columns nb and wt\n\n-   then we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts()\n\n-   row order is very important so do not rearrange the observations after using set_nbs() or set_wts()\n:::\n\nWe can use these news columns to manually calculate the local Gi\\* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star of the newly created gi_starts data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- GDPPC_nb %>%\n  group_by(Year) %>%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %>%\n  tidyr::unnest(gi_star)\n```\n:::\n\n\n## Mann-Kendall Test\n\nA monotonic series or function is one that only increases (or decreases) and never changes direction. As long as the function either stays flats\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg <- gi_stars %>%\n  ungroup() %>%\n  filter(County == \"Changsha\") |>\n  select(County, Year, gi_star)\n```\n:::\n\n\nNext we plot the result by using ggplot2 functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neval: false\nggplot(data = cbg,\n       aes(X = Year,\n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n:::\n\n\nIn above result, **sl** is the p-value. With reference to the results, we will reject the hypothesis null and infer that a slight upward trend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars %>%\n  group_by(County) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa)\n```\n:::\n\n\nMann-Kendall test data.frame\n\n## Performing Emerging Hotspot Analysis\n\nLastly, we will perform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object x (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation is to be performed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = \"GDPPC\",\n  k = 1,\n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa,\n       aes = (x = classification)) +\n  geom_bar()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_ehsa <- hunan %>%\n  left_join(ehsa,\n              by = join_by(County == location))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- hunan_ehsa %>%\n  filter(p_value <0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") +\n  tm_borders(alpha = 0.4)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}