{
  "hash": "1fd0fb6018cf338cdf24e03425e37a70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 4\"\nauthor: \"Joshua TING\"\ndate: \"16 September, 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code Chunk\"\n    number-sections: true\nexecute:\n  eval: false #r will run through all codes\n  echo: true #r will display all code chunk\n  warning: false #for mark down\n  freeze: true #r will not render all existing  html files\n  message: false #avoid printing warning message\neditor: source\n---\n\n\n# In - Class Exercise 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, GWmodel, ggstatsplot, knitr)\n```\n:::\n\n\n## Preparing The Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\",\n                    layer=\"Hunan\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan_sf, hunan2012) %>% #when join need common value (must be the same), \n  select(1:3, 7, 15, 16, 31, 32) #choosing the column by numbered\n```\n:::\n\n\n::: callout-note\n## If the column names are not the same:\n\nUse left_join:\n\nby (\"name of column\", \"name of column\")\n:::\n\n## Converting to SpatialPolygon DataFrame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>% #convert sf to SP - it is a list object\n  as_Spatial()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan_sp, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach - \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T) # T is TRUE, indicate it is in decimel degree\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach - \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T) # T is TRUE, indicate it is in decimel degree\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach - \"AIC\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n                vars = \"GDPPC\",\n                bw = bw_AIC,\n                kernel = \"bisquare\",\n                adaptive = TRUE,\n                longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_df, gwstat_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(human_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) + #opacity\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"centre\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.5,\n            legend.width = 1.5,\n            frmae = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngestats <- gwss(GDPPC ~)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}